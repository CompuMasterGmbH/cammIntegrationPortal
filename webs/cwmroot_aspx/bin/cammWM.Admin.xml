<?xml version="1.0"?>
<doc>
<assembly>
<name>
cammWM.Admin
</name>
</assembly>
<members>
<member name="M:CompuMaster.camm.WebManager.Pages.Administration.User_Update_Flag.SaveChanges">
	<summary>
 This method saves the changes
 </summary>
	<remarks>This save method is called by the form's submit button</remarks>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.User_Update_Flag">
	<summary>
     A page to update user flags
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.User_Resetpw">
	<summary>
     A page to reset user password
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.User_Hotline_Support">
	<summary>
     The User_Hotline_Support page allows to enter user login name and if user exists then it shows user's profile and other feature
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.User_Delete">
	<summary>
     A page to delete a user
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Users_Navbar_Preview.IsAccessibleToLang(System.Int32,System.Data.DataTable,System.Int64)">
	<summary>
 Check accessibility of a servergroup application for a particular language and check the disabled application
 </summary>
	<param name="LangId"></param>
	<param name="Mydt"></param>
	<param name="userid"></param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.Users_Navbar_Preview">
	<summary>
     The Users_Navbar_Preview page 
 </summary>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.UsersUpdate.LimitedAllowedCountries">
	<summary>
 The list of allowed values for the country field (or empty list in case of no limitation)
 </summary>
	<returns></returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersUpdate.AvailableLanguages(System.Int32)">
	<summary>
     ID and (English) title of all available languages (markets) + the currently selected language (when it is different)
 </summary>
	<param name="alwaysIncludeThisLanguage">The currently selected language should always appear</param>
	<remarks>Intended for the preferred languages dropdown boxes
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersUpdate.AvailableAccessLevels">
	<summary>
     ID and title of the available access levels
 </summary>
	<remarks>Intended for the preferred languages dropdown boxes
 </remarks>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.UsersUpdate">
	<summary>
     Updates user details
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.UsersOverview">
	<summary>
     The users overview administration page
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.ValidatorNewUserLoginName_ServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
	<summary>
 Checks whether username is already in use
 </summary>
	<param name="source"></param>
	<param name="args"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.initNotCopiedDataDatatable">
	<summary>
 Initialize Datatable. Contains data that was not copied e.g. protected flags
 Does NOT contain values that are manually unchecked
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.notCopiedDataEnum">
	<summary>
 Enumeration of data types which automatically cannot be copied
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.AddNotCopiedData(CompuMaster.camm.WebManager.Pages.Administration.UsersClone.notCopiedDataEnum,System.String)">
	<summary>
 Add a new entry that automatically cannot be copied
 </summary>
	<param name="dataType">Type of data, e.g. AdditionalFlag</param>
	<param name="value">The value, e.g. value of additional flag or name of membership</param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.RemoveNotCopiedData(CompuMaster.camm.WebManager.Pages.Administration.UsersClone.notCopiedDataEnum,System.String)">
	<summary>
 Removes an entry, e.g. authorization has required flags, but its a protected flag
 Handles check or uncheck the authorization-checkbox
 </summary>
	<param name="dataType"></param>
	<param name="value"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.AvailableLanguages(System.Int32)">
	<summary>
     ID and (English) title of all available languages (markets) + the currently selected language (when it is different)
 </summary>
	<param name="alwaysIncludeThisLanguage">The currently selected language should always appear</param>
	<remarks>Intended for the preferred languages dropdown boxes
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.AvailableAccessLevels">
	<summary>
     ID and title of the available access levels
 </summary>
	<remarks>Intended for the preferred languages dropdown boxes
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.AssignUserInfoDataToForm">
	<summary>
 Assigns the source user information to the webform
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.AssignAdditionalFlagsToPnl">
	<summary>
 Assigns the additional flags information of the source user to the webform
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.AdditionalFlagAllowCopy(System.String)">
	<summary>
 Check whether it's allowed to copy the additional flag
 Customizing in /sysdata/users_clone.aspx
 </summary>
	<param name="flagName"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.AssignMembershipsToPnl">
	<summary>
 Assigns the membership information of the source user to the webform
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.AssignAuthToPnl">
	<summary>
 Assigns the authorization information of the source user to the webform
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.OnCheckboxCheckChanged(System.Object,System.EventArgs)">
	<summary>
 Handles the checkbox check changed event to control required flags
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.UsersClone.getRequiredFlags(System.Int32)">
	<summary>
 Get required flags for given securityobject
 </summary>
	<param name="SecurityObjectID"></param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.UsersClone">
	<summary>
     Clone user
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.UserList">
	<summary>
     A page to view a list of users
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ResetUserPassword">
	<summary>
     Reset the user's password
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.BatchUserFlags.Editor.GetUsersBySecurityObjectID(System.Int32)">
	<summary>
 The list of authorized users for an application by using the effective rules
 </summary>
	<param name="securityObjectID"></param>
	<returns></returns>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.RulesUserFields">
	<summary>
     A page to select user-field and display a list of users per field
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.FieldUserList">
	<summary>
     A page to view a list of users as per selected user-field
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ReplaceFieldInfo">
	<summary>
     A page to replace perticular field value with new value
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ListAllRules">
	<summary>
     A page to view the list of rules, also rule can be edited or applied
 </summary>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.New_Users.LimitedAllowedCountries">
	<summary>
 The list of allowed values for the country field (or empty list in case of no limitation)
 </summary>
	<returns></returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.New_Users.CreateNewUserInfo">
	<summary>
 Create a new user information object from scratch and fill it with the details from of the form
 </summary>
	<returns></returns>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.New_Users">
	<summary>
     A page to create a new user
 </summary>
</member><member name="P:CompuMaster.camm.WebManager.Controls.Administration.MailQueueMonitorActionControl.EmailID">
	<summary>
     Unique ID of email analysis record
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Controls.Administration.MailQueueMonitorActionControl.QueueState">
	<summary>
     Email queue state
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Controls.Administration.MailQueueMonitorActionControl.IsAuthorisedToSeeEmailText">
	<summary>
     Is user authorised to view/moderate this email
 </summary>
	<value></value>
</member><member name="M:CompuMaster.camm.WebManager.Controls.Administration.MailQueueMonitorActionControl.LinkbuttonResend_Clicked(System.Object,System.EventArgs)">
	<summary>
     Event to resend the email
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Controls.Administration.MailQueueMonitorActionControl.LinkbuttonFailure_Clicked(System.Object,System.EventArgs)">
	<summary>
     Accecpts email failure and updates record in database
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Controls.Administration.MailQueueMonitorActionControl.LinkbuttonSendThisEmailToMe_Clicked(System.Object,System.EventArgs)">
	<summary>
     Sends this email to the Supervisor.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="T:CompuMaster.camm.WebManager.Controls.Administration.MailQueueMonitorActionControl">
	<summary>
     Processes action events show email text, resend email, accept failure.
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitorDatePicker.Calendar_SelectionChanged(System.Object,System.EventArgs)">
	<summary>
     displays date choosen by user in text box
 </summary>
	<param name="s"></param>
	<param name="e"></param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitorDatePicker">
	<summary>
     Used to choose date
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitorShowEmail.IsAuthorisedToSeeEmailText(System.String,System.String,System.String,System.String)">
	<summary>
     Checks for current user authorization to see email body
 </summary>
	<param name="fromAddress">Senders address</param>
	<param name="toAddress">receipients address</param>
	<param name="cc">receipients address in CC</param>
	<param name="bcc">receipients address Bcc</param>
	<returns>Returns True if user is authorised</returns>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitorShowEmail">
	<summary>
     Displays email content
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.PageOnLoad(System.Object,System.EventArgs)">
	<summary>
     Controls on web page are initialized 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.PageOnPreRender(System.Object,System.EventArgs)">
	<summary>
     Email analysis done and added to page
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.ServerFormClientID">
	<summary>
     The ClientID of the server form to access it with JavaScript
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor._LoadData(System.String)">
	<summary>
     Load the data
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.LoadData(System.String)">
	<summary>
     Load the data from the database when it hasn't already been loaded
 </summary>
 ---------------------------------------------------------------------------

</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.CachedDataFromViewState">
	<summary>
     Cache the output data from the old request for the new post-back-request
 </summary>
	<value></value>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.SecurityRoles">
	<summary>
     Security roles in Mail Queue Monitor
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.SecurityRole(CompuMaster.camm.WebManager.WMSystem)">
	<summary>
     Security role of current user
 </summary>
	<param name="cammWebManager"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.InitializeControls">
	<summary>
     Initializes controls on web page
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.AddListItem(System.Web.UI.WebControls.ListControl,System.String,System.String,System.Boolean)">
	<summary>
     Checkboxlist add item
 </summary>
	<param name="ctrl">Control to which items to be added</param>
	<param name="text">text of item</param>
	<param name="value">value of item</param>
	<param name="checked">denotes whether item is selected or not</param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DefaultAnalysisDataTable(System.String)">
	<summary>
     Default analysis as Data table
 </summary>
	<returns>DataTable</returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.AddAnalysis(System.Data.DataTable)">
	<summary>
     Adds analysis to web page
 </summary>
	<param name="analysis">DataTable holding analysis data</param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.FilteredAnalysisDataTable(System.String)">
	<summary>
     Filtered analysis as data table
 </summary>
	<returns>DataTable with filtered analysis data</returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.IsAddRowToFilteredTable(CompuMaster.camm.WebManager.Messaging.MailMessage)">
	<summary>
     If current email data fits in filtering condition then returns true else false.
 </summary>
	<param name="mail">object of Type Mail</param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.SortString">
	<summary>
     Sort string for sorting purpose
 </summary>
	<returns>String to sort analysis</returns>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.CurrentSortID">
	<summary>
     Defines current sorting id
 </summary>
	<returns>Sorting ID</returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.AddRowToAnalysisTable(System.Boolean,System.Int32,System.Int32,System.Int32,System.String,CompuMaster.camm.WebManager.Messaging.QueueMonitoring.QueueStates,System.String,System.String,System.DateTime,System.String,System.String,System.String,CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.ToType)">
	<summary>
     Adds TableRow to Analysis table on web page
 </summary>
	<param name="addHiddenArea">add hidden area or not</param>
	<param name="toAddressCount">receipient address count in To field</param>
	<param name="counter">Analysis Table on webpage row counter</param>
	<param name="emailID">unique email id of log_emailMessage </param>
	<param name="subject">Subject of email</param>
	<param name="state">state of an email</param>
	<param name="sender">Sender of an email</param>
	<param name="toAddress">receipient address</param>
	<param name="sentTime">email sent time</param>
	<param name="fromAddress"></param>
	<param name="cc">receipient address as CC</param>
	<param name="bcc">receipient address as Bcc</param>
	<param name="toType">receipient type defined for filter purpose</param>
	<returns>Return integer - next row location to be added in Analysis table at webpage</returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.IsAuthorisedToSeeEmailText(System.String,System.String,System.String,System.String)">
	<summary>
     Checks for current user authorization to see email body
 </summary>
	<param name="fromAddress">Senders address</param>
	<param name="toAddress">receipients address</param>
	<param name="cc">receipients address in CC</param>
	<param name="bcc">receipients address Bcc</param>
	<returns>Returns True if user is authorised</returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DoesLog_eMailMessageToBeListedForCurrentUser(System.String,System.String,System.String,System.String)">
	<summary>
     does Log_e-mail message listed for current user
 </summary>
	<param name="fromAddress">Senders address</param>
	<param name="toAddress">receipients address</param>
	<param name="cc">receipients address in CC</param>
	<param name="bcc">receipients address Bcc</param>
	<returns>Returns True if user is authorised</returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.SelectedStatesToFilter">
	<summary>
     Returns all selected states from web page, to filter purpose
 </summary>
	<returns>all selected states for filter purpose as string</returns>
	<remarks>
     States as a string separated with comma used in database query e.g. state in (1, 2)
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.GetDefaultAnalysis(System.String)">
	<summary>
     Default analysis to for CSV file
 </summary>
	<returns>Datatable with default analysis data</returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.GetFilteredAnalysis(System.String)">
	<summary>
     Filtered analysis for CSV file
 </summary>
	<returns>Datatable with filtered analysis data</returns>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.ToType">
	<summary>
     email receipient type
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.Sorting">
	<summary>
     ID to use sort by
 </summary>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DataToFilter">
	<summary>
     Property to hold Data to filter in session.
 </summary>
	<value></value>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.GetDataToFilterFromWebPage">
	<summary>
     Retrives data entered by user from webpage
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.ButtonReset_Clicked(System.Object,System.EventArgs)">
	<summary>
     Reset controls
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.ButtonExportReport_Clicked(System.Object,System.EventArgs)">
	<summary>
     Export email analysis as CSV file
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.LinkButtonState_Clicked(System.Object,System.EventArgs)">
	<summary>
     Sort email analysis by State 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.LinkButtonSender_Clicked(System.Object,System.EventArgs)">
	<summary>
     Sort email analysis by Sender
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.LinkButtonSubject_Clicked(System.Object,System.EventArgs)">
	<summary>
 Sorts email analysis by Subject
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.LinkButtonID_Clicked(System.Object,System.EventArgs)">
	<summary>
     Sorts email analysis by email id
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.LinkButtonSentTime_Clicked(System.Object,System.EventArgs)">
	<summary>
     Sorts email analysis by Sent time
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DataToFilterClass.States">
	<summary>
     Used to hold the status of State for filter purpose
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DataToFilterClass">
	<summary>
     To hold data to filter
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.AnalysisRow.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,CompuMaster.camm.WebManager.Controls.Administration.MailQueueMonitorActionControl,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="emailID">emailID of Log_eMailMessage</param>
	<param name="subject">Subject of an email</param>
	<param name="state">state of an email</param>
	<param name="fromAddress">sender address</param>
	<param name="toAddress">receipient address</param>
	<param name="sentTime">email sent time</param>
	<param name="action">action Control </param>
	<param name="addHideDisplayButton">add hide dislplay button or not</param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.AnalysisRow">
	<summary>
 To display filtered data in tablerow format
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.HideDisplayRow.#ctor(System.Int32,System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="emailID">email id of log_emailMessage</param>
	<param name="cc">receipient address as CC</param>
	<param name="bcc">receipient address as Bcc</param>
	<param name="toAddress"></param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.HideDisplayRow">
	<summary>
     To display filtered data in tablerow format.
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.AddLine">
	<summary>
     Adds row as a line
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DataService.LoadMailMessages(System.String)">
	<summary>
     Load the mail messages from the database
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DataService.LoadErroDetails(System.String,System.String)">
	<summary>
     Load the mail messages from the database
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DataService.LoadMailMessages(System.String,System.Int32,System.String,System.DateTime,System.DateTime)">
	<summary>
     Load the mail messages from the database
 </summary>
	<param name="emailID">emailID of Log_emailMessage</param>
	<param name="statesToFilter">state to filter as string</param>
	<param name="fromDate">date from which emails to be filtered</param>
	<param name="toDate">date to which emails to be filtered</param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DataService.LoadMailMessages(System.String,System.Int32,System.Byte,System.DateTime,System.DateTime)">
	<summary>
     Load the mail messages from the database
 </summary>
	<param name="emailID">emailID of Log_emailMessage</param>
	<param name="state">state of an email</param>
	<param name="fromDate">date from which email to be filtered</param>
	<param name="toDate">data to which email to be filtered</param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor.DataService">
	<summary>
     Data layer class
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MailQueueMonitor">
	<summary>
     This page allows the supervisors to view the activity of the e-mail queue and to restart a mail item when there were some problems
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.DisplayText">
	<summary>
     This page displays text 
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.UpdateEmailDetail">
	<summary>
     This page updates email details
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ApplicationUpdate.UpdateApplication">
	<summary>
 Updates the application using the data entered on the page
 </summary>
	<remarks></remarks>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ApplicationNew">
	<summary>
     A page to create new application
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ApplicationList">
	<summary>
     A page to view list of applications
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ApplicationDelete">
	<summary>
     A page to delete an application
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ApplicationClone">
	<summary>
     A page to clone an application
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ApplicationBasePage.RenderAuthorizations(System.Int32)">
	<summary>
 The authorizations overview block for an application as HTML
 </summary>
	<param name="securityObjectID"></param>
	<returns></returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.CurrentAdminIsSecurityOperator">
	<summary>
 Is the current user a security operator?
 </summary>
	<remarks>Result is cached</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.CurrentAdminIsSupervisor">
	<summary>
 Is the current user a supervisor?
 </summary>
	<remarks>Result is cached</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.CurrentAdminIsSecurityMaster(CompuMaster.camm.WebManager.Pages.Administration.Page.AdministrationItemType)">
	<summary>
 Is the current user a SecurityMaster?
 </summary>
	<remarks>Result is cached</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.CurrentAdminIsPrivilegedForItemAdministration(CompuMaster.camm.WebManager.Pages.Administration.Page.AdministrationItemType,CompuMaster.camm.WebManager.Pages.Administration.Page.AuthorizationTypeEffective,System.Int32)">
	<summary>
 Is the current admin priviledged for administration of this item?
 </summary>
	<param name="itemType">Applications or Groups</param>
	<param name="itemID">The primary ID of the item in applications/groups table</param>
	<param name="authorizationType">View, UpdateRelations, etc. in their effective meaning (is the user authorized by this single item or by an item-independent setting?)</param>
	<returns>Supervisors and security masters are always granted, all others have to be checked in more details</returns>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.CurrentAdminIsPrivilegedForItemAdministration(CompuMaster.camm.WebManager.Pages.Administration.Page.AdministrationItemType,CompuMaster.camm.WebManager.Pages.Administration.Page.AuthorizationTypeItemIndependent)">
	<summary>
 Is the current admin priviledged for administration of this item in its effective meaning?
 </summary>
	<param name="itemType">Applications or Groups</param>
	<param name="authorizationType">SecurityMaster, ViewAllRelations, New, etc.</param>
	<returns>Supervisors and security masters are always granted, all others have to be checked in more details</returns>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.CloseAndDisposeDbConnectionAndDbCommand(System.Data.SqlClient.SqlCommand)">
	<summary>
 Close the sql connection and the sql command safely
 </summary>
	<param name="command"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.CloseAndDisposeDbConnection(System.Data.SqlClient.SqlConnection)">
	<summary>
 Close the sql connection and the sql command safely
 </summary>
	<param name="connection"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.CurrentDbVersion">
	<summary>
 The current version of the database instance
 </summary>
	<returns></returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.CurrentDatabaseDateTime">
	<summary>
 The date/time as used by the database server
 </summary>
	<returns></returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.SafeLookupGroupName(System.Int32)">
	<summary>
 Safely lookup the name of a group
 </summary>
	<param name="id"></param>
	<returns></returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.SafeLookupUserFullName(System.Int64)">
	<summary>
 Safely lookup the name of a user
 </summary>
	<param name="id"></param>
	<returns></returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.Page.SafeLookupUserFullName(System.Int64,System.Boolean)">
	<summary>
 Safely lookup the name of a user
 </summary>
	<param name="id"></param>
	<param name="additionallyWithLoginName">True to enable additional output of login name, e.g. "User Full Name (Login name)"</param>
	<returns></returns>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.Page">
	<summary>
     The base page for all administration page of camm Web-Manager
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AdjustDelegates">
	<summary>
     Adjustments of delegations of security adminisration tasks
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.Membership_Delete">
	<summary>
     A page to delete a membership
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MembershipsOverview">
	<summary>
     Memberships overview
 </summary>
	<remarks>
     The number and order of the colmns in the export files might be subject of change in future for additional fields.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MembershipsNew.rptUserListItemBound(System.Object,System.Web.UI.WebControls.RepeaterItemEventArgs)">
	<summary>
 Bind user data to the repeater control
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MembershipsNew.IsAlreadyMember(System.Int32,System.Int64,System.Boolean)">
	<summary>
 Checks whether the given user is already a member of the given group
 </summary>
	<param name="groupID"></param>
	<param name="userId"></param>
	<remarks></remarks>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MembershipsNew">
	<summary>
     A page to add new members to an existing group
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.MembershipList.ListOfRecords">
	<summary>
 Bind the data for the group headlines to the control with the list of records (indirectly bind the list of users, too)
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MembershipList">
	<summary>
     A page to view the list of memberships
 </summary>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.NumberOfUsersToImportInOneRoundTrip">
	<summary>
     How many user accounts shall be imported at once?
 </summary>
	<value></value>
	<remarks>
     Web requests are regulary limited to 30 seconds. So we're not allowed to import all user accounts in one request. We have to split the processing of the whole list into multiple requests if we don't want the request to stop unexpectedly.
 </remarks>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.TotalRecords">
	<summary>
     The number of total records in the import table
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.ProgressState">
	<summary>
     The number of already processed records from the import table
 </summary>
	<value></value>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.CalculateProgressState">
	<summary>
     Calculate the values for the output to the user
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.ExecuteImport">
	<summary>
     Manage the import of several user accounts (while this page request)
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.ImportUser(System.Data.DataRow,System.Int32)">
	<summary>
     Import some user details defined by the given datarow of user data
 </summary>
	<param name="userData">A datarow from the import table</param>
	<param name="rowID">An ID to identify the row by the user in case of errors</param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.ApplyUserProfileData(CompuMaster.camm.WebManager.WMSystem.UserInformation@,System.Data.DataRow,System.Globalization.CultureInfo)">
	<summary>
     Assign the user profile information from the datarow to the user object
 </summary>
	<param name="user">The user information object which shall be updated</param>
	<param name="userData">The import data record</param>
	<param name="culture">The culture of the import data (when a string has to be converted to a datetime, etc.)</param>
	<remarks>
     All profile information will be copied here except loginname and password
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.ApplyMembershipsAndAuthorizations(CompuMaster.camm.WebManager.WMSystem.UserInformation,System.Data.DataRow,System.Globalization.CultureInfo,CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActions,CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActions)">
	<summary>
     Assign the memberships and authorizations to a user's account
 </summary>
	<param name="user">The user information object which shall be updated</param>
	<param name="userData">The import data record</param>
	<param name="culture">The culture of the import data (when a string has to be converted to a datetime, etc.)</param>
	<param name="importActionMemberships">The type of the import</param>
	<param name="importActionAuthorizations">The type of the import</param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.ApplyMembershipsAndAuthorizations_ApplyAuths(CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActions,CompuMaster.camm.WebManager.WMSystem.UserInformation,System.Boolean,System.Boolean,System.Int32[],System.Int32[],System.Boolean[],CompuMaster.camm.WebManager.Notifications.INotifications)">
	<summary>
 Apply all required auth changes
 </summary>
	<param name="importActionAuthorizations"></param>
	<param name="user"></param>
	<param name="isDevRule">Chosen calling mode of this method will only change this rule type</param>
	<param name="isDenyRule">Chosen calling mode of this method will only change this rule type</param>
	<param name="RequiredSecurityObjects"></param>
	<param name="RequiredSecurityObjects_SrvGroupIDs"></param>
	<param name="RequiredSecurityObjects_IsDevRule"></param>
	<param name="MyNotifications"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.ApplyMembershipsAndAuthorizations_AddMissingAuths(CompuMaster.camm.WebManager.WMSystem.UserInformation,CompuMaster.camm.WebManager.WMSystem.SecurityObjectAuthorizationForUser[],System.Boolean,System.Boolean,System.Int32[],System.Int32[],System.Boolean[],CompuMaster.camm.WebManager.Notifications.INotifications)">
	<summary>
 Add missing authorizations
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.ApplyMembershipsAndAuthorizations_DropAuths(CompuMaster.camm.WebManager.WMSystem.UserInformation,CompuMaster.camm.WebManager.WMSystem.SecurityObjectAuthorizationForUser[],System.Boolean,System.Boolean,System.Int32[],System.Int32[],System.Boolean[])">
	<summary>
 Remove unwanted authorizations
 </summary>
	<param name="user"></param>
	<param name="CurrentAuthorizations"></param>
	<param name="isDevRule"></param>
	<param name="isDenyRule"></param>
	<param name="RequiredSecurityObjects"></param>
	<param name="RequiredSecurityObjects_SrvGroupIDs"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing.PageOnError(System.Object,System.EventArgs)">
	<summary>
     Error handler for unexpected page errors
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>
     Show the error message on the page output in the IFrame
 </remarks>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ImportUsersProcessing">
	<summary>
     A helper page which processes the import in fact
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsers.SwitchStep(System.Int32)">
	<summary>
     Switch the form to the desired step
 </summary>
	<param name="stepNumber"></param>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportUsers.CurrentStepNumber">
	<summary>
     The current step number
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportUsers.ImportFile">
	<summary>
     The temporary filename of the location of the uploaded file
 </summary>
	<value></value>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsers.AddTestResultRowToTable(System.Collections.Generic.List{System.Data.DataRow},System.Collections.Generic.List{System.Data.DataRow},System.Boolean,System.Data.DataTable,System.String,System.Type,System.String)">
	<summary>
 Add a test result record to both the testResults collection and also to the checkTable table
 </summary>
	<param name="testResultsWithErrors"></param>
	<param name="testResultsWithWarnings"></param>
	<param name="isError">True for error records, false for warning items</param>
	<param name="checkTable"></param>
	<param name="columnName"></param>
	<param name="destinationType"></param>
	<param name="testResultHtml"></param>
	<return>True on exceeding limit, False while below limit</return>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsers.AddTestResultRowToTable(System.Data.DataTable,System.String,System.String)">
	<summary>
 Add an additional notification result record to the checkTable table
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.ImportUsers.PrepareStep4ValidateImportColumn(System.Data.DataTable,System.Data.DataTable,System.Globalization.CultureInfo,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Char[],System.Char[])">
	<summary>
     Verify the existance and the datatype of a column with its requirements
 </summary>
	<param name="checkTable">Table with columns "Required column", "Data type", "Errors" containing check results</param>
	<param name="importTable">Import data</param>
	<param name="columnName">Column name</param>
	<param name="destinationType">Data type of column</param>
	<param name="requiredColumnForUpdate"></param>
	<param name="requiredColumnForInsert"></param>
	<param name="requiredColumnForRemove"></param>
	<param name="allowDBNull">True if DbNull values are allowed, False if a value must be available</param>
	<param name="allowEmptyString">True if empty string values are allowed, False if the string must contain at least 1 character</param>
	<param name="forbiddenChars">An optional list of forbidden chars</param>
	<param name="warningChars">An optional list of chars causing warnings</param>
	<returns>True on validation success, False on errors</returns>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ImportUsers">
	<summary>
     Import a list of users - wizard
 </summary>
	<remarks>
     Step 1: Upload the CSV file
     Step 2: Choose the charset of the CSV file (default is UTF-8)
     Step 3: Verify the table content (the set of columns) and select an action (insert, update, delete)
     Step 4: Processing
     Step 5: Finish - view the log
 </remarks>
</member><member name="F:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActions.InsertOrUpdate">
	<summary>
     Insert users which haven't existed yet as well as update users which already exist
 </summary>
</member><member name="F:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActions.InsertOnly">
	<summary>
     Only insert items which haven't existed
 </summary>
</member><member name="F:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActions.UpdateOnly">
	<summary>
     Only update users which already exist
 </summary>
</member><member name="F:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActions.Remove">
	<summary>
     Remove all items specified in the import file
 </summary>
</member><member name="F:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActions.FitExact">
	<summary>
     Memberships/authorization shall be set exactly as defined in the import file
 </summary>
	<remarks>
     Items will be inserted or removed as needed to fit the requirements
 </remarks>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActions">
	<summary>
     Available action types
 </summary>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportAction">
	<summary>
     The selected import action
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActionMemberships">
	<summary>
     The selected import action for memberships
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportActionAuthorizations">
	<summary>
     The selected import action for authorizations
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportOverwriteWithEmptyCellValues">
	<summary>
 Overwrite user profiles with empty values when the import file provides empty cells OR overwrite user profiles only with existing values from import files while ignoring overwriting of filled user profile fields with empty values from import file
 </summary>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.MessagesLog">
	<summary>
     Messages logged by the import process
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportTable">
	<summary>
     The import table with the user information
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.SuppressUserNotificationMails">
	<summary>
     The import table with the user information
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.SuppressAdminNotificationMails">
	<summary>
     The import table with the user information
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ImportBase.ImportFileCulture">
	<summary>
     The culture of the import file (required to correctly convert all strings back to their origin data type, e. g. date values)
 </summary>
	<value></value>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ImportBase">
	<summary>
     Import
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.MembershipsOfUser(CompuMaster.camm.WebManager.WMSystem,System.Int64)">
	<summary>
     A table with all group memberships of the requested user
 </summary>
	<param name="webmanager">An instance of a valid camm Web-Manager</param>
	<param name="userID">The requested user ID</param>
	<returns>A data table containing groups and users information</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.MembersOfGroup(CompuMaster.camm.WebManager.WMSystem,System.Int32)">
	<summary>
     A table with all users of the requested user group
 </summary>
	<param name="webmanager">An instance of a valid camm Web-Manager</param>
	<param name="groupID">The requested user group ID</param>
	<returns>A data table containing groups and users information</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.MembersOfGroup(CompuMaster.camm.WebManager.WMSystem,System.Int32,System.Boolean)">
	<summary>
     A table with active/ all users of the requested user group
 </summary>
	<param name="webmanager"></param>
	<param name="groupID"></param>
	<param name="includeDisabledUsers"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.MembershipsTableAddRow(System.Data.DataTable,CompuMaster.camm.WebManager.WMSystem.GroupInformation,CompuMaster.camm.WebManager.WMSystem.UserInformation,System.Boolean)">
	<summary>
     Attach one line to the output table
 </summary>
	<param name="memberships">The output table</param>
	<param name="groupInfo">One group information object</param>
	<param name="userInfo">One user information object</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.MembershipsTableCreate(System.String)">
	<summary>
     Create an empty datatable for output
 </summary>
	<param name="tableName"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.AuthorizedGroupsAndPersons(CompuMaster.camm.WebManager.WMSystem,System.Int32,System.Boolean)">
	<summary>
     Load the list of directly and inherited authorizations for a security object
 </summary>
	<param name="webmanager"></param>
	<param name="securityObjectID"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.AuthorizationsTableAddRow(System.Data.DataTable,CompuMaster.camm.WebManager.WMSystem.SecurityObjectInformation,CompuMaster.camm.WebManager.WMSystem.GroupInformation,CompuMaster.camm.WebManager.WMSystem.UserInformation,CompuMaster.camm.WebManager.WMSystem.ServerGroupInformation,System.Boolean)">
	<summary>
     Attach one line to the output table
 </summary>
	<param name="authorizations">The output table</param>
	<param name="securityObjectInfo"></param>
	<param name="groupInfo">One group information object</param>
	<param name="userInfo">One user information object</param>
	<param name="serverGroupInfo"></param>
	<param name="isInherited"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.AuthorizationsTableCreate(System.String)">
	<summary>
     Create an empty datatable for output
 </summary>
	<param name="tableName"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.Users(CompuMaster.camm.WebManager.WMSystem,CompuMaster.camm.WebManager.WMSystem.UserInformation[])">
	<summary>
     A table with all users of the requested user group
 </summary>
	<param name="webmanager">An instance of a valid camm Web-Manager</param>
	<param name="userInfos">The requested users</param>
	<returns>A data table containing groups and users information</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.Users(CompuMaster.camm.WebManager.WMSystem,CompuMaster.camm.WebManager.WMSystem.UserInformation[],System.Boolean)">
	<summary>
     A table with active/ all users of the requested user group
 </summary>
	<param name="webmanager"></param>
	<param name="userInfos"></param>
	<param name="includeDisabledUsers"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.UsersTableAddRow(System.Data.DataTable,CompuMaster.camm.WebManager.WMSystem.UserInformation)">
	<summary>
     Attach one line to the output table
 </summary>
	<param name="users">The output table</param>
	<param name="userInfo">One user information object</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Export.UsersTableCreate(System.String)">
	<summary>
     Create an empty datatable for output
 </summary>
	<param name="tableName"></param>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Export">
	<summary>
     Export of data
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.GroupUpdate">
	<summary>
     A page to update a group
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.GroupNew">
	<summary>
     A page to create new group
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.GroupList">
	<summary>
     A page to view the list of Groups
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.GroupDelete">
	<summary>
     A page to delete a group
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Controls.Administration.UserControl.SafeLookupGroupName(System.Int32)">
	<summary>
 Safely lookup the name of a group
 </summary>
	<param name="id"></param>
	<returns></returns>
</member><member name="M:CompuMaster.camm.WebManager.Controls.Administration.UserControl.SafeLookupUserFullName(System.Int64)">
	<summary>
 Safely lookup the name of a user
 </summary>
	<param name="id"></param>
	<returns></returns>
</member><member name="M:CompuMaster.camm.WebManager.Controls.Administration.UserControl.SafeLookupUserFullName(System.Int64,System.Boolean)">
	<summary>
 Safely lookup the name of a user
 </summary>
	<param name="id"></param>
	<param name="additionallyWithLoginName">True to enable additional output of login name, e.g. "User Full Name (Login name)"</param>
	<returns></returns>
</member><member name="T:CompuMaster.camm.WebManager.Controls.Administration.FloatingMenu">
	<summary>
     The floating menu on the right bottom which allows navigation to top of the current page or a history go back
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Controls.Administration.AssemblyInfo.GetAssemblyInfo">
	<summary>
 Assembly (title and version) information
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.UpdateServerGroup">
	<summary>
     A page to Update a server group
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.UpdateServer">
	<summary>
     A page to update a server
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.ServerList">
	<summary>
     A page to view the list of servers
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.NewServerGroup">
	<summary>
     A page to add a new server group
 </summary>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.MarketActivations.Market">
	<summary>
     The market which shall be changed
 </summary>
	<value></value>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.MarketActivations.MarketActivated">
	<summary>
     Shall the market be activated?
 </summary>
	<value></value>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.MarketActivations">
	<summary>
     Activation of markets
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryConfigRecord(System.String)">
	<summary>
 Read configuration set based on 1 record per key
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryConfigRecords(System.String)">
	<summary>
 Read configuration set based on 0 up to multiple records per key
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryConfigRecordsWithSubKeys(System.String)">
	<summary>
 Read configuration set based on 0 up to multiple records per key
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.DeleteConfigRecord(System.String)">
	<summary>
 Delete a configuration set based on 1 record per key
 </summary>
	<param name="key"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.DeleteConfigRecords(System.String)">
	<summary>
 Delete a configuration set based on 0 up to multiple records per key
 </summary>
	<param name="key"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.WriteConfigRecord(CompuMaster.camm.WebManager.Administration.GlobalConfiguration.ConfigRecord)">
	<summary>
 Save a configuration set based on 1 record per key to the central database
 </summary>
	<param name="data"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.WriteConfigRecords(System.String,System.Collections.Generic.List{CompuMaster.camm.WebManager.Administration.GlobalConfiguration.ConfigRecord})">
	<summary>
 Save a configuration set based on 0 up to multiple records per key to the central database
 </summary>
	<param name="key"></param>
	<param name="dataSet"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryInt64ConfigEntry(System.String)">
	<summary>
 Read configuration value
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryStringConfigEntry(System.String)">
	<summary>
 Read configuration value
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryBooleanConfigEntry(System.String)">
	<summary>
 Read configuration value
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryByteArrayConfigEntry(System.String)">
	<summary>
 Read configuration value
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryDoubleConfigEntry(System.String)">
	<summary>
 Read configuration value
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryDecimalConfigEntry(System.String)">
	<summary>
 Read configuration value
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.GlobalConfiguration.QueryDateTimeConfigEntry(System.String)">
	<summary>
 Read configuration value
 </summary>
	<param name="key"></param>
	<remarks></remarks>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.Delete_ServersAccesslevelrelation">
	<summary>
     A page to delete a Server Lveel relation.
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.DeleteServerGroup">
	<summary>
     A page to delete a server group
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.DeleteServer">
	<summary>
     A page to delete server
 </summary>
</member><member name="P:CompuMaster.camm.WebManager.Pages.Administration.ConfigurationAllowedValuesUserProfileFieldCountry.AllowedValues">
	<summary>
 All allowed values incl. blank value if selected
 </summary>
	<returns></returns>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.Add_ServersAccesslevelrelation">
	<summary>
     A page to create a Server Level relation.
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AddNewServer">
	<summary>
     A page to add new server
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.About.AvailableUpdatesUpToBuild">
	<summary>
 The last version informaton on the update build which is available
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.About.CurrentDatabaseBuild">
	<summary>
 The current build no. of the database
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.About.CurrentApplicationBuild">
	<summary>
 The version number of the camm Web-Manager library with major, minor and build no., but without revision no.
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.About.CurrentApplicationVersion">
	<summary>
 The current version of the camm Web-Manager library
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.About.CurrentAdminAreaVersion">
	<summary>
 The current version of the cammWM.Admin library
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.About.FindFilesToBeRemoved">
	<summary> 
 Find obsolete files and directories which should better be removed 
 </summary>
	<returns>An array of virtual paths found on the local web server</returns>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.About.FindFilesToBeRemoved_CheckVirtualDirectory(System.Collections.ArrayList,System.String)">
	<summary> 
 Check the existance of an virtual directory and if true then add it to the resultList 
 </summary>
	<param name="resultList">The results list</param>
	<param name="virtualPath">A path to check</param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.About.LoadLicenceData">
	<summary>
 Load license data from database cache or from CompuMaster license/registration server
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.About.DropFilesToBeRemoved">
	<summary> 
 Delete the unwanted files and directories 
 </summary>
	<returns>A NameValueCollection containing all occured errors where Key is the filename and Value is the exception message</returns>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.About">
	<summary>
 About page
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserNameSafely(CompuMaster.camm.WebManager.WMSystem,System.Int64,System.Boolean)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="userID">An active, deleted or never-existing user ID</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserName(CompuMaster.camm.WebManager.WMSystem.UserInformation)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="userInfo">The userinformation object.</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserName(CompuMaster.camm.WebManager.WMSystem.UserInformation,System.Boolean)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="userInfo">The userinformation object.</param>
	<param name="additionallyWithLoginName">True to enable additional output of login name, e.g. "User Full Name (Login name)"</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserName(System.Object,System.Object)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="firstName">The first name of the user.</param>
	<param name="lastName">The last name of the user.</param>
	<remarks>The parameters are mostly expected as a Datarow item. This is why there are of type Object. The function itself will do a check if theyre are NullReference, NullValue or DBnull.Value.</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserName(System.Object,System.Object,System.Int64)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="firstName">The first name of the user.</param>
	<param name="lastName">The last name of the user.</param>
	<param name="userID">The id of the user.</param>
	<remarks>The parameters are mostly expected as a Datarow item. This is why there are of type Object. The function itself will do a check if theyre are NullReference, NullValue or DBnull.Value.</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserName(System.Object,System.Object,System.Object)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="firstName">The first name of the user.</param>
	<param name="lastName">The last name of the user.</param>
	<param name="loginName">The login name of the user.</param>
	<remarks>The parameters are mostly expected as a Datarow item. This is why there are of type Object. The function itself will do a check if theyre are NullReference, NullValue or DBnull.Value.</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserName(System.Object,System.Object,System.Object,System.Int64)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="firstName">The first name of the user.</param>
	<param name="lastName">The last name of the user.</param>
	<param name="loginName">The login name of the user.</param>
	<param name="userID">The id of the user.</param>
	<remarks>The parameters are mostly expected as a Datarow item. This is why there are of type Object. The function itself will do a check if theyre are NullReference, NullValue or DBnull.Value.</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserName(System.Object,System.Object,System.Object,System.Object)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="firstName">The first name of the user.</param>
	<param name="lastName">The last name of the user.</param>
	<param name="loginName">The login name of the user.</param>
	<param name="nameAddittion">The name addittion of the user.</param>
	<remarks>The parameters are mostly expected as a Datarow item. This is why there are of type Object. The function itself will do a check if theyre are NullReference, NullValue or DBnull.Value.</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserName(System.Object,System.Object,System.Object,System.Object,System.Int64)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="firstName">The first name of the user.</param>
	<param name="lastName">The last name of the user.</param>
	<param name="loginName">The login name of the user.</param>
	<param name="nameAddittion">The name addittion of the user.</param>
	<param name="userID">The id of the user.</param>
	<remarks>The parameters are mostly expected as a Datarow item. This is why there are of type Object. The function itself will do a check if theyre are NullReference, NullValue or DBnull.Value.</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.FormatUserName(System.Object,System.Object,System.Object,System.Object,System.Int64,System.String,System.Boolean)">
	<summary>
 Formats a username depending of which parts of the username exists.
 </summary>
	<param name="firstName">The first name of the user.</param>
	<param name="lastName">The last name of the user.</param>
	<param name="loginName">The login name of the user.</param>
	<param name="nameAddittion">The name addittion of the user.</param>
	<param name="userID">The id of the user.</param>
	<param name="fullNameFromLog">The name information from the user log which might be the only information on a deleted user account</param>
	<param name="additionallyWithLoginName">True to enable additional output of login name, e.g. "User Full Name (Login name)"</param>
	<remarks>The parameters are mostly expected as a Datarow item. This is why there are of type Object. The function itself will do a check if theyre are NullReference, NullValue or DBnull.Value.</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.RemoveLastOf(System.String,System.String)">
	<summary>
 Searches for a string in the supplied string and if found, removes the last occurance of it
 </summary>
	<param name="text">text</param>
	<param name="strToKill">last occurance of this string which should be removed</param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.GetCsrfToken(System.String)">
	<summary>
 Generates a token to guard against CSRF attacks
 </summary>
	<param name="additionalInput">string to pass to the hash function </param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Utils.OnValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
	<summary>
 Suppress all SSL certification requirements - just use the webservice SSL URL
 </summary>
	<param name="sender"></param>
	<param name="cert"></param>
	<param name="chain"></param>
	<param name="errors"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Tools.Data.NamespaceDoc">
	<summary>
     CompuMaster common tools and utilities
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.CreateConnection(System.String,System.String)">
	<summary>
     Create a new database connection by reflection of a type name
 </summary>
	<param name="assemblyName">The assembly which implements the desired connection type</param>
	<param name="connectionTypeName">The case-insensitive type name of the connection class, e. g. System.Data.SqlClient.SqlConnection</param>
	<returns>The created connection object as an IDbConnection</returns>
	<remarks>
     Errors will be thrown in case of unresolvable parameter values or if the created type can't be casted into an IDbConnection.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.CreateConnection(System.String,System.String,System.String)">
	<summary>
     Create a new database connection by reflection of a type name
 </summary>
	<param name="assemblyName">The assembly which implements the desired connection type</param>
	<param name="connectionTypeName">The case-insensitive type name of the connection class, e. g. System.Data.SqlClient.SqlConnection</param>
	<param name="connectionString">A connection string to be used for this connection</param>
	<returns>The created connection object as an IDbConnection</returns>
	<remarks>
     Errors will be thrown in case of unresolvable parameter values or if the created type can't be casted into an IDbConnection.
 </remarks>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations">
	<summary>
     Automations for the connection in charge
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations,System.Int32)">
	<summary>
     Executes a command without returning any data
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
	<param name="commandTimeout">A timeout value in seconds for the command object (negative values will be ignored and leave the timeout value on default)</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteNonQuery(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command without returning any data
 </summary>
	<param name="dbCommand">The command with an assigned connection property value</param>
	<param name="automations">Automation options for the connection</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command without returning any data
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
	<summary>
     Executes a command without returning any data
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteScalar(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command scalar and returns the value
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteScalar(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command scalar and returns the value
 </summary>
	<param name="dbCommand">The command with an assigned connection property value</param>
	<param name="automations">Automation options for the connection</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.DataException.ConvertParameterCollectionToString(System.Data.IDataParameterCollection)">
	<summary>
     Convert the collection with all the parameters to a plain text string
 </summary>
	<param name="parameters">An IDataParameterCollection of a IDbCommand</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.DataException.ToString">
	<summary>
     The complete and detailed exception information inclusive the command text
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.DataException">
	<summary>
     Data execution exceptions with details on the executed IDbCommand
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteScalar(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
	<summary>
     Executes a command scalar and returns the value
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstColumnIntoArrayList(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command with a data reader and returns the values of the first column
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstColumnIntoArrayList(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command with a data reader and returns the values of the first column
 </summary>
	<param name="dbCommand">The command object which shall be executed</param>
	<param name="automations">Automation options for the connection</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstColumnIntoArrayList(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
	<summary>
     Executes a command with a data reader and returns the values of the first column
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoGenericKeyValuePairs``2(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
	<param name="dbCommand">The command object which shall be executed</param>
	<param name="automations">Automation options for the connection</param>
	<returns>A list of KeyValuePairs with the values of the first column in the key field and the second column values in the value field, NULL values are initialized with null (Nothing in VisualBasic)</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoGenericDictionary``2(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
	<param name="dbCommand">The command object which shall be executed</param>
	<param name="automations">Automation options for the connection</param>
	<returns>A dictionary of KeyValuePairs with the values of the first column in the key field and the second column values in the value field, NULL values are initialized with null (Nothing in VisualBasic)</returns>
	<remarks>
 ATTENTION: Please note that multiple but equal values from the first column will result in 1 key/value pair since hashtables use a unique key and override the value with the last assignment. Alternatively you may want to receive a List of KeyValuePairs.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoHashtable(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command with a data reader and returns the values of the first column
 </summary>
	<param name="dbCommand">The command object which shall be executed</param>
	<param name="automations">Automation options for the connection</param>
	<returns>A hashtable with the values of the first column in the hashtable's key field and the second column values in the hashtable's value field</returns>
	<remarks>
 ATTENTION: Please note that multiple but equal values from the first column will result in 1 key/value pair since hashtables use a unique key and override the value with the last assignment. Alternatively you may want to receive an array of DictionaryEntry.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoHashtable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
	<returns>A hashtable with the values of the first column in the hashtable's key field and the second column values in the hashtable's value field</returns>
	<remarks>
 ATTENTION: Please note that multiple but equal values from the first column will result in 1 key/value pair since hashtables use a unique key and override the value with the last assignment. Alternatively you may want to receive an array of DictionaryEntry.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoDictionaryEntryArray(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
	<param name="dbCommand">The prepared command to the database</param>
	<param name="automations">Automation options for the connection</param>
	<returns>An array of DictionaryEntry with the values of the first column as the key element and the second column values in the value element of the DictionaryEntry</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoDictionaryEntryArray(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
	<returns>An array of DictionaryEntry with the values of the first column as the key element and the second column values in the value element of the DictionaryEntry</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoHashtable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
	<summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<returns>A hashtable with the values of the first column in the hashtable's key field and the second column values in the hashtable's value field</returns>
	<remarks>
 ATTENTION: Please note that multiple but equal values from the first column will result in 1 key/value pair since hashtables use a unique key and override the value with the last assignment. Alternatively you may want to receive an array of DictionaryEntry.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations,System.Int32)">
	<summary>
     Executes a command and return the data reader object for it
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
	<param name="commandTimeout">A timeout value in seconds for the command object (negative values will be ignored and leave the timeout value on default)</param>
	<remarks>
     Automations can only open a connection, but never close. This is because you have to close the connection by yourself AFTER you walked through the data reader.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command and return the data reader object for it
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.ExecuteReader(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Executes a command and return the data reader object for it
 </summary>
	<param name="dbCommand">The command with an assigned connection property value</param>
	<param name="automations">Automation options for the connection</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.FillDataTable(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations,System.String)">
	<summary>
     Fill a new data table with the result of a command
 </summary>
	<param name="dbCommand">The command object</param>
	<param name="automations">Automation options for the connection</param>
	<param name="tableName">The name for the new table</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.FillDataTable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations,System.String,System.Int32)">
	<summary>
     Fill a new data table with the result of a command
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
	<param name="tableName">The name for the new table</param>
	<param name="commandTimeout">A timeout value in seconds for the command object (negative values will be ignored and leave the timeout value on default)</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.FillDataTable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations,System.String)">
	<summary>
     Fill a new data table with the result of a command
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
	<param name="tableName">The name for the new table</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.FillDataTable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Fill a new data table with the result of a command
 </summary>
	<param name="dbConnection">The connection to the database</param>
	<param name="commandText">The command text</param>
	<param name="commandType">The command type</param>
	<param name="sqlParameters">An optional list of SqlParameters</param>
	<param name="automations">Automation options for the connection</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.FillDataTables(System.Data.IDbCommand,CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.Automations)">
	<summary>
     Fill a new data table with the result of a command
 </summary>
	<param name="dbCommand">The command object</param>
	<param name="automations">Automation options for the connection</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.CloseAndDisposeConnection(System.Data.IDbConnection)">
	<summary>
     Securely close and dispose a database connection
 </summary>
	<param name="connection">The connection to close and dispose</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.CloseConnection(System.Data.IDbConnection)">
	<summary>
     Securely close a database connection
 </summary>
	<param name="connection">The connection to close</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider.OpenConnection(System.Data.IDbConnection)">
	<summary>
     Open a database connection if it is not already opened
 </summary>
	<param name="connection">The connection to open</param>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Tools.Data.DataQuery.AnyIDataProvider">
	<summary>
     Common routines to query data from any data provider
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvReader(System.IO.StreamReader,System.Boolean,System.Globalization.CultureInfo,System.Int32[],System.Boolean)">
	<summary>
     Read from a CSV table
 </summary>
	<param name="reader">A stream reader targetting CSV data</param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="columnWidths">An array of column widths in their order</param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,System.Int32[],System.String,System.Boolean)">
	<summary>
     Read from a CSV file
 </summary>
	<param name="path">The path of the file</param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="columnWidths">An array of column widths in their order</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,System.Int32[],System.Text.Encoding,System.Globalization.CultureInfo,System.Boolean)">
	<summary>
     Read from a CSV file
 </summary>
	<param name="path">The path of the file</param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="columnWidths">An array of column widths in their order</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="cultureFormatProvider"></param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,System.Int32[],System.Boolean)">
	<summary>
     Read from a CSV table
 </summary>
	<param name="data">The content of a CSV file</param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="columnWidths">An array of column widths in their order</param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,System.Globalization.CultureInfo,System.Int32[],System.Boolean)">
	<summary>
     Read from a CSV table
 </summary>
	<param name="data">The content of a CSV file</param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="cultureFormatProvider"></param>
	<param name="columnWidths">An array of column widths in their order</param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.SplitFixedCsvLineIntoCellValues(System.String@,System.Collections.ArrayList,System.Int32@,System.Int32[])">
	<summary>
     Split a line content into separate column values and add them to the output list
 </summary>
	<param name="lineContent">The line content as it has been read from the CSV file</param>
	<param name="outputList">An array list which shall hold the separated column values</param>
	<param name="startPosition">The start position to which the columnWidhts are related to</param>
	<param name="columnWidths">An array of column widths in their order</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.SplitFixedCsvLineIntoCellValuesIsNewColumnPosition(System.Int32,System.Int32,System.Int32[])">
	<summary>
     Calculate if the current position is the first position of a new column
 </summary>
	<param name="currentPosition">The current position in the whole document</param>
	<param name="startPosition">The start position to which the columnWidhts are related to</param>
	<param name="columnWidths">An array containing the definitions of the column widths</param>
	<returns>True if the current position identifies a new column value, otherwise False</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
	<summary>
     Read from a CSV file
 </summary>
	<param name="path">The path of the file</param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
	<param name="recognizeMultipleColumnSeparatorCharsAsOne">Currently without purpose</param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Boolean)">
	<summary>
     Read from a CSV file
 </summary>
	<param name="Path">The path of the file</param>
	<param name="IncludesColumnHeaders">Indicates wether column headers are present</param>
	<param name="Encoding">The text encoding of the file</param>
	<param name="cultureFormatProvider"></param>
	<param name="RecognizeTextBy">A character indicating the start and end of text strings</param>
	<param name="recognizeMultipleColumnSeparatorCharsAsOne">Currently without purpose</param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvReader(System.IO.StreamReader,System.Boolean,System.Globalization.CultureInfo,System.Char,System.Char,System.Boolean,System.Boolean)">
	<summary>
     Read from a CSV table
 </summary>
	<param name="reader">A stream reader targetting CSV data</param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
	<param name="recognizeDoubledColumnSeparatorCharAsOne">Currently without purpose</param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.SplitCsvLineIntoCellValues(System.String@,System.Collections.ArrayList,System.Int32@,System.Char,System.Char,System.Boolean)">
	<summary>
     Split a line content into separate column values and add them to the output list
 </summary>
	<param name="lineContent">The line content as it has been read from the CSV file</param>
	<param name="outputList">An array list which shall hold the separated column values</param>
	<param name="startposition"></param>
	<param name="columnSeparator"></param>
	<param name="recognizeTextBy"></param>
	<param name="recognizeDoubledColumnSeparatorCharAsOne"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,System.Char,System.Char,System.Boolean,System.Boolean)">
	<summary>
     Read from a CSV table
 </summary>
	<param name="data">The content of a CSV file</param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
	<param name="recognizeDoubledColumnSeparatorCharAsOne">Currently without purpose</param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Boolean)">
	<summary>
     Read from a CSV table
 </summary>
	<param name="data">The content of a CSV file</param>
	<param name="IncludesColumnHeaders">Indicates wether column headers are present</param>
	<param name="cultureFormatProvider"></param>
	<param name="RecognizeTextBy">A character indicating the start and end of text strings</param>
	<param name="recognizeDoubledColumnSeparatorCharAsOne">Currently without purpose</param>
	<param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ConvertDBNullValuesToEmptyStrings(System.Data.DataTable)">
	<summary>
     Convert DBNull values to empty strings
 </summary>
	<param name="data">The data which might contain DBNull values</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ConvertEmptyStringsToDBNullValue(System.Data.DataTable)">
	<summary>
     Convert empty string values to DBNull
 </summary>
	<param name="data">The data which might contain empty strings</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.FixedLengthText(System.String,System.Int32,System.Boolean)">
	<summary>
     Trims a string to exactly the required fix size
 </summary>
	<param name="text"></param>
	<param name="fixedLengthSize"></param>
	<param name="alignedRight">Add additionally required spaces on the left (True) or on the right (False)</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ConvertDataTableToCsv(System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.Int32[])">
	<summary>
     Convert the datatable to a string based, comma-separated format
 </summary>
	<param name="dataTable"></param>
	<param name="includesColumnHeaders"></param>
	<param name="cultureFormatProvider"></param>
	<param name="columnWidths"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.ConvertDataTableToCsv(System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.String,System.Char)">
	<summary>
     Convert the datatable to a string based, comma-separated format
 </summary>
	<param name="dataTable"></param>
	<param name="includesColumnHeaders"></param>
	<param name="cultureFormatProvider"></param>
	<param name="columnSeparator"></param>
	<param name="recognizeTextBy"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,System.String,System.String,System.Char,System.Char)">
	<summary>
     Write to a CSV file
 </summary>
	<param name="path">The path of the file</param>
	<param name="dataTable"></param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
	<param name="decimalSeparator">A character indicating the decimal separator in the text string</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.WriteDataTableToCsvString(System.Data.DataTable,System.Boolean,System.String,System.Char,System.Char,System.Char)">
	<summary>
     Create a CSV table
 </summary>
	<param name="dataTable"></param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
	<param name="decimalSeparator"></param>
	<returns>A string containing the CSV table</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.WriteDataTableToCsvBytes(System.Data.DataTable,System.Boolean,System.String,System.Char,System.Char,System.Char)">
	<summary>
     Create a CSV table
 </summary>
	<param name="dataTable"></param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
	<param name="decimalSeparator"></param>
	<returns>A string containing the CSV table</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.WriteDataTableToCsvBytes(System.Data.DataTable,System.Boolean,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Char)">
	<summary>
     Create a CSV table
 </summary>
	<param name="dataTable"></param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="cultureFormatProvider">A globalization information object for the conversion of all data to strings</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
	<returns>A string containing the CSV table</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.WriteDataTableToCsvMemoryStream(System.Data.DataTable,System.Boolean,System.String,System.String,System.Char,System.Char)">
	<summary>
     Create a CSV table
 </summary>
	<param name="dataTable"></param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
	<param name="decimalSeparator"></param>
	<returns>A memory stream containing all texts as bytes in Unicode format</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.WriteDataTableToCsvMemoryStream(System.Data.DataTable,System.Boolean,System.Text.Encoding,System.Globalization.CultureInfo,System.String,System.Char)">
	<summary>
     Create a CSV table
 </summary>
	<param name="dataTable"></param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="cultureFormatProvider">A globalization information object for the conversion of all data to strings</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
	<returns>A memory stream containing all texts as bytes in Unicode format</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.CsvEncode(System.String,System.Char)">
	<summary>
     Encode a string into CSV encoding
 </summary>
	<param name="value">The unencoded text</param>
	<param name="recognizeTextBy">The character to identify a string in the CSV file</param>
	<returns>The encoded writing style of the given text</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv.WriteDataViewToCsvFile(System.String,System.Data.DataView,System.Boolean,System.String,System.String,System.Char,System.Char)">
	<summary>
     Write to a CSV file
 </summary>
	<param name="path">The path of the file</param>
	<param name="dataView">A dataview object with the desired rows</param>
	<param name="includesColumnHeaders">Indicates wether column headers are present</param>
	<param name="encoding">The text encoding of the file</param>
	<param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
	<param name="recognizeTextBy">A character indicating the start and end of text strings</param>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Tools.Data.Csv">
	<summary>
     Provides simplified access to CSV files
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertColumnValuesIntoList``1(System.Data.DataColumn)">
	<summary>
 Copy the values of a data column into an arraylist
 </summary>
	<param name="column">The column which contains the data</param>
	<returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToList``1(System.Data.DataColumn)">
	<summary>
     Convert a data table column to a generic list (except DBNull values)
 </summary>
	<param name="column">The column which shall be used to fill the arraylist</param>
	<returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
	<remarks>
	</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToList``1(System.Data.DataTable)">
	<summary>
     Convert a data table column to a generic list (except DBNull values)
 </summary>
	<param name="data">The first column of this data table will be used</param>
	<returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
	<remarks>
	</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToList``1(System.Data.DataTable,System.Int32)">
	<summary>
     Convert a data table column to a generic list (except DBNull values)
 </summary>
	<param name="data">The data table with the content</param>
	<param name="selectedColumnIndex">The column which shall be used to fill the arraylist</param>
	<returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
	<remarks>
	</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.RemoveDuplicates(System.Data.DataTable,System.String)">
	<summary>
 Remove rows with duplicate values in a given column
 </summary>
	<param name="dataTable">A datatable with duplicate values</param>
	<param name="columnName">Column name of the datatable which contains the duplicate values</param>
	<returns>A datatable with unique records in the specified column</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.KeepColumnsAndRemoveAllOthers(System.Data.DataTable,System.String[])">
	<summary>
     Drop all columns except the required ones
 </summary>
	<param name="table">A data table containing some columns</param>
	<param name="remainingColumns">A list of column names which shall not be removed</param>
	<remarks>
     If the list of the remaining columns contains some column names which are not existing, then those column names will be ignored. There will be no exception in this case.
     The names of the columns are handled case-insensitive.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.RowIndex(System.Data.DataRow)">
	<summary>
     Lookup the row index for a data row in a data table
 </summary>
	<param name="dataRow">The data row whose index number is required</param>
	<returns>An index number for the given data row</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.FindDuplicates(System.Data.DataColumn)">
	<summary>
     Find duplicate values in a given row and calculate the number of occurances of each value in the table
 </summary>
	<param name="column">A column of a datatable</param>
	<returns>A hashtable containing the origin column value as key and the number of occurances as value</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.FindDuplicates(System.Data.DataColumn,System.Int32)">
	<summary>
     Find duplicate values in a given row and calculate the number of occurances of each value in the table
 </summary>
	<param name="column">A column of a datatable</param>
	<param name="minOccurances">Only values with occurances equal or more than this number will be returned</param>
	<returns>A hashtable containing the origin column value as key and the number of occurances as value</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToWinFormsListControlItem(System.Data.DataTable)">
	<summary>
     Convert the first two columns into objects which can be consumed by the ListControl objects in the System.Windows.Forms namespaces
 </summary>
	<param name="datatable">The datatable which contains a key column and a value column for the list control</param>
	<returns>An array of WinFormsListControlItem</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDatasetToXml(System.Data.DataSet)">
	<summary>
     Convert a dataset to an xml string with data and schema information
 </summary>
	<param name="dataset"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertXmlToDataset(System.String)">
	<summary>
     Convert an xml string to a dataset
 </summary>
	<param name="xml"></param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.GetDataTableWithSubsetOfRows(System.Data.DataTable,System.Int32)">
	<summary>
     Create a new data table clone with only some first rows
 </summary>
	<param name="SourceTable">The source table to be copied</param>
	<param name="NumberOfRows">The number of rows to be copied</param>
	<returns>The new clone of the datatable</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.GetDataTableWithSubsetOfRows(System.Data.DataTable,System.Int32,System.Int32)">
	<summary>
     Create a new data table clone with only some first rows
 </summary>
	<param name="SourceTable">The source table to be copied</param>
	<param name="StartAtRow">The position where to start the copy process, the first row is at 0</param>
	<param name="NumberOfRows">The number of rows to be copied</param>
	<returns>The new clone of the datatable</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.RemoveRowsWithNoCorrespondingValueInComparisonTable(System.Data.DataColumn,System.Data.DataColumn)">
	<summary>
     Remove those rows in the source column which haven't got the same value in the compare table
 </summary>
	<param name="sourceColumn">This is the column of the master table where all operations shall be executed</param>
	<param name="valuesMustExistInThisColumnToKeepTheSourceRow">This is the comparison value against the source table's column</param>
	<returns>An arraylist of removed keys</returns>
	<remarks>
     Strings will be compared case-insensitive, DBNull values in the source table will always be removed
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.RemoveRowsWithNoCorrespondingValueInComparisonTable(System.Data.DataColumn,System.Data.DataColumn,System.Boolean,System.Boolean)">
	<summary>
     Remove those rows in the source column which haven't got the same value in the compare table
 </summary>
	<param name="sourceColumn">This is the column of the master table where all operations shall be executed</param>
	<param name="valuesMustExistInThisColumnToKeepTheSourceRow">This is the comparison value against the source table's column</param>
	<param name="ignoreCaseInStrings">Strings will be compared case-insensitive</param>
	<param name="alwaysRemoveDBNullValues">Always remove the source row when it contains a DBNull value</param>
	<returns>An arraylist of removed keys</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.CreateDataRowClone(System.Data.DataRow)">
	<summary>
     Creates a complete clone of a DataRow with structure as well as data
 </summary>
	<param name="sourceRow">The source row to be copied</param>
	<returns>The new clone of the DataRow</returns>
	<remarks>
     The resulting DataRow has got the schema from the sourceRow's DataTable, but it hasn't been added to the table yet.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.GetDataTableClone(System.Data.DataTable)">
	<summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
	<param name="SourceTable">The source table to be copied</param>
	<returns>The new clone of the datatable</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.GetDataTableClone(System.Data.DataTable,System.String)">
	<summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
	<param name="SourceTable">The source table to be copied</param>
	<param name="RowFilter">An additional row filter, for all rows set it to null (Nothing in VisualBasic)</param>
	<returns>The new clone of the datatable</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.GetDataTableClone(System.Data.DataTable,System.String,System.String)">
	<summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
	<param name="SourceTable">The source table to be copied</param>
	<param name="RowFilter">An additional row filter, for all rows set it to null (Nothing in VisualBasic)</param>
	<param name="Sort">An additional sort command</param>
	<returns>The new clone of the datatable</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.GetDataTableClone(System.Data.DataTable,System.String,System.String,System.Int32)">
	<summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
	<param name="SourceTable">The source table to be copied</param>
	<param name="RowFilter">An additional row filter, for all rows set it to null (Nothing in VisualBasic)</param>
	<param name="Sort">An additional sort command</param>
	<param name="topRows">How many rows from top shall be returned as maximum?</param>
	<returns>The new clone of the datatable</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.GetDataTableClone(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
	<param name="sourceTable">The source table to be copied</param>
	<param name="destinationTable">The destination of all operations; the destination table will be a clone of the source table at the end</param>
	<param name="rowFilter">An additional row filter, for all rows set it to null (Nothing in VisualBasic)</param>
	<param name="sort">An additional sort command</param>
	<param name="topRows">How many rows from top shall be returned as maximum?</param>
	<param name="overwritePropertiesOfExistingColumns">Shall the data type or any other settings of an existing table be modified to match the source column's definition?</param>
	<param name="dropExistingRowsInDestinationTable">Remove the existing rows of the destination table, first</param>
	<param name="removeUnusedColumnsFromDestinationTable">Remove the existing columns of the destination table which are not present in the source table</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataViewToDataTable(System.Data.DataView)">
	<summary>
     Creates a clone of a dataview but as a new data table
 </summary>
	<param name="data">The data view to create the data table from</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertArrayListToDataTable(System.Collections.ArrayList)">
	<summary>
     Convert an ArrayList to a datatable
 </summary>
	<param name="arrayList">An ArrayList with some content</param>
	<returns>Datatable with column "key" and "value"</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToArrayList(System.Data.DataColumn)">
	<summary>
     Convert a data table to an arraylist
 </summary>
	<param name="column">The column which shall be used to fill the arraylist</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToArrayList(System.Data.DataTable)">
	<summary>
     Convert a data table to an arraylist
 </summary>
	<param name="data">The first column of this data table will be used</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToArrayList(System.Data.DataTable,System.Int32)">
	<summary>
     Convert a data table to an arraylist
 </summary>
	<param name="data">The data table with the content</param>
	<param name="selectedColumnIndex">The column which shall be used to fill the arraylist</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToHashtable(System.Data.DataColumn,System.Data.DataColumn)">
	<summary>
     Convert a data table to a hash table
 </summary>
	<param name="keyColumn">This is the key column from the data table and MUST BE UNIQUE</param>
	<param name="valueColumn">A column which contains the values</param>
	<remarks>
 ATTENTION: the very first column is used as key column and must be unique therefore
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToHashtable(System.Data.DataTable)">
	<summary>
     Convert a data table to a hash table
 </summary>
	<param name="data">The first two columns of this data table will be used</param>
	<remarks>
     ATTENTION: the very first column is used as key column and must be unique therefore
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToHashtable(System.Data.DataTable,System.Int32,System.Int32)">
	<summary>
     Convert a data table to a hash table
 </summary>
	<param name="data">The data table with the content</param>
	<param name="keyColumnIndex">This is the key column from the data table and MUST BE UNIQUE (make it unique, first!)</param>
	<param name="valueColumnIndex">A column which contains the values</param>
	<remarks>
     ATTENTION: the very first column is used as key column and must be unique therefore
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToDictionaryEntryArray(System.Data.DataTable)">
	<summary>
     Convert a data table to an array of dictionary entries
 </summary>
	<param name="data">The first two columns of this data table will be used</param>
	<remarks>
     The very first column is used as key column, the second one as the value column
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToDictionaryEntryArray(System.Data.DataColumn,System.Data.DataColumn)">
	<summary>
     Convert a data table to an array of dictionary entries
 </summary>
	<param name="keyColumn">This is the key column from the data table</param>
	<param name="valueColumn">A column which contains the values</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataTableToDictionaryEntryArray(System.Data.DataTable,System.Int32,System.Int32)">
	<summary>
     Convert a data table to an array of dictionary entries
 </summary>
	<param name="data">The data table with the content</param>
	<param name="keyColumnIndex">This is the key column from the data table</param>
	<param name="valueColumnIndex">A column which contains the values</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertHashtableToDataTable(System.Collections.Hashtable)">
	<summary>
     Convert a hashtable to a datatable
 </summary>
	<param name="hashtable">A hashtable with some content</param>
	<returns>Datatable with column "key" and "value"</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertICollectionToDataTable(System.Collections.ICollection)">
	<summary>
     Convert an ICollection to a datatable
 </summary>
	<param name="collection">An ICollection with some content</param>
	<returns>Datatable with column "key" and "value"</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertIDictionaryToDataTable(System.Collections.IDictionary)">
	<summary>
     Convert an IDictionary to a datatable
 </summary>
	<param name="dictionary">An IDictionary with some content</param>
	<returns>Datatable with column "key" and "value"</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertIDictionaryToDataTable(System.Collections.IDictionary,System.Boolean)">
	<summary>
     Convert an IDictionary to a datatable
 </summary>
	<param name="dictionary">An IDictionary with some content</param>
	<param name="keyIsUnique">If true, the key column in the data table will be marked as unique</param>
	<returns>Datatable with column "key" and "value"</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertNameValueCollectionToDataTable(System.Collections.Specialized.NameValueCollection)">
	<summary>
     Convert a NameValueCollection to a datatable
 </summary>
	<param name="nameValueCollection">An IDictionary with some content</param>
	<returns>Datatable with column "key" and "value"</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertNameValueCollectionToDataTable(System.Collections.Specialized.NameValueCollection,System.Boolean)">
	<summary>
     Convert a NameValueCollection to a datatable
 </summary>
	<param name="nameValueCollection">An IDictionary with some content</param>
	<param name="keyIsUnique">If true, the key column in the data table will be marked as unique</param>
	<returns>Datatable with column "key" and "value"</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.GetDataTableViaODBC(System.String,System.String,System.String)">
	<summary>
     Simplified creation of a DataTable by definition of a SQL statement and a connection string
 </summary>
	<param name="strSQL">The SQL statement to retrieve the data</param>
	<param name="ConnectionString">The connection string to the data source</param>
	<param name="NameOfNewDataTable">The name of the new DataTable</param>
	<returns>A filled DataTable</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.GetDataTableViaSqlClient(System.String,System.String,System.String)">
	<summary>
     Simplified creation of a DataTable by definition of a SQL statement and a connection string
 </summary>
	<param name="strSQL">The SQL statement to retrieve the data</param>
	<param name="ConnectionString">The connection string to the data source</param>
	<param name="NameOfNewDataTable">The name of the new DataTable</param>
	<returns>A filled DataTable</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToHtmlTable(System.Data.DataTable)">
	<summary>
     Return a string with all columns and rows as an html table
 </summary>
	<param name="dataTable">The datatable to retrieve the content from</param>
	<returns>If no rows have been processed, the return string is nothing</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToHtmlTable(System.Data.DataRowCollection,System.String)">
	<summary>
     Return a string with all columns and rows as an html table
 </summary>
	<param name="rows">The rows to be processed</param>
	<param name="label">An optional title of the rows</param>
	<returns>If no rows have been processed, the return string is nothing</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToHtmlTable(System.Data.DataRow[],System.String)">
	<summary>
     Return a string with all columns and rows as an html table
 </summary>
	<param name="rows">The rows to be processed</param>
	<param name="label">An optional title of the rows</param>
	<returns>If no rows have been processed, the return string is nothing</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToHtmlTable(System.Data.DataTable,System.String,System.String,System.String)">
	<summary>
     Return a string with all columns and rows as an html table
 </summary>
	<param name="dataTable">The datatable to retrieve the content from</param>
	<param name="titleTagOpener">The opening tag in front of the table's title</param>
	<param name="titleTagEnd">The closing tag after the table title</param>
	<param name="additionalTableAttributes">Additional attributes for the rendered table</param>
	<returns>If no rows have been processed, the return string is nothing</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToHtmlTable(System.Data.DataRowCollection,System.String,System.String,System.String,System.String)">
	<summary>
     Return a string with all columns and rows as an html table
 </summary>
	<param name="rows">The rows to be processed</param>
	<param name="label">An optional title of the rows</param>
	<param name="titleTagOpener">The opening tag in front of the table's title</param>
	<param name="titleTagEnd">The closing tag after the table title</param>
	<param name="additionalTableAttributes">Additional attributes for the rendered table</param>
	<returns>If no rows have been processed, the return string is nothing</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToHtmlTable(System.Data.DataRowCollection,System.String,System.String,System.String,System.String,System.Boolean)">
	<summary>
     Return a string with all columns and rows as an html table
 </summary>
	<param name="rows">The rows to be processed</param>
	<param name="label">An optional title of the rows</param>
	<param name="titleTagOpener">The opening tag in front of the table's title</param>
	<param name="titleTagEnd">The closing tag after the table title</param>
	<param name="additionalTableAttributes">Additional attributes for the rendered table</param>
	<param name="htmlEncodeCellContentAndLineBreaks">Encode all output to valid HTML</param>
	<returns>If no rows have been processed, the return string is nothing</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.HtmlEncodeLineBreaks(System.String)">
	<summary>
     Converts all line breaks into HTML line breaks ("&lt;br&gt;")
 </summary>
	<param name="Text"></param>
	<remarks>
     Supported line breaks are linebreaks of Windows, MacOS as well as Linux/Unix.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToHtmlTable(System.Data.DataRow[],System.String,System.String,System.String,System.String)">
	<summary>
     Return a string with all columns and rows as an html table
 </summary>
	<param name="rows">The rows to be processed</param>
	<param name="label">An optional title of the rows</param>
	<param name="titleTagOpener">The opening tag in front of the table's title</param>
	<param name="titleTagEnd">The closing tag after the table title</param>
	<param name="additionalTableAttributes">Additional attributes for the rendered table</param>
	<returns>If no rows have been processed, the return string is nothing</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToPlainTextTable(System.Data.DataTable)">
	<summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
	<param name="dataTable">The datatable to retrieve the content from</param>
	<returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToPlainTextTable(System.Data.DataRow[],System.String)">
	<summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
	<param name="rows">The rows to be processed</param>
	<param name="label">An optional title of the rows</param>
	<returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables._ConvertToPlainTextTable(System.Data.DataRowCollection,System.String)">
	<summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
	<param name="rows">The rows to be processed</param>
	<param name="label">An optional title of the rows</param>
	<returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.RemoveColumns(System.Data.DataTable,System.String[])">
	<summary>
     Remove the specified columns if they exist
 </summary>
	<param name="datatable">A datatable where the operations shall be made</param>
	<param name="columnNames">The names of the columns which shall be removed</param>
	<remarks>
     The columns will only be removed if they exist. If a column name doesn't exist, it will be ignored.
 </remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertToPlainTextTable(System.Data.DataRowCollection,System.String)">
	<summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
	<param name="rows">The rows to be processed</param>
	<param name="label">An optional title of the rows</param>
	<returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataReaderToDataSet(System.Data.IDataReader)">
	<summary>
     Convert any opened datareader into a dataset
 </summary>
	<param name="dataReader">An already opened dataReader</param>
	<returns>A dataset containing all datatables the dataReader was able to read</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataReaderToDataTable(System.Data.IDataReader)">
	<summary>
     Convert any opened datareader into a data table
 </summary>
	<param name="dataReader">An already opened dataReader</param>
	<returns>A data table containing all data the dataReader was able to read</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ConvertDataReaderToDataTable(System.Data.IDataReader,System.String)">
	<summary>
     Convert any opened datareader into a data table
 </summary>
	<param name="dataReader">An already opened dataReader</param>
	<param name="tableName">The name for the new table</param>
	<returns>A data table containing all data the dataReader was able to read</returns>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.DataReaderAdapter">
	<summary>
     A data adapter for data readers making the real conversion
 </summary>
</member><member name="F:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTypes.Inner">
	<summary>
     The result contains only those rows which exist in both tables
 </summary>
</member><member name="F:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTypes.Left">
	<summary>
     The result contains all rows of the left, parent table and only those rows of the other table which are related the rows of the left table
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTypes">
	<summary>
     Table join types
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTables(System.Data.DataTable,System.Data.DataTable,CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTypes)">
	<summary>
     Execute a table join on two tables of the same dataset based on the first relation found
 </summary>
	<param name="leftParentTable"></param>
	<param name="rightChildTable"></param>
	<param name="joinType">Inner or left join</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTables(System.Data.DataTable,System.Data.DataTable,System.Data.DataRelation,CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTypes)">
	<summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
	<param name="leftParentTable">The left or parent table</param>
	<param name="rightChildTable">The right or child table</param>
	<param name="relation">A data table relation which shall be used for the joining</param>
	<param name="joinType">Inner or left join</param>
	<remarks>
     The selected columns are: 
     <list>
			<item>all columns from the left parent table</item>
			<item>INNER JOIN: those columns from the right child table which are not member of the relation in charge</item>
			<item>LEFT JOIN: all columns from the right child table</item>
		</list>
	</remarks>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTables(System.Data.DataTable,System.Data.DataColumn[],System.Data.DataTable,System.Data.DataColumn[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTypes)">
	<summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
	<param name="leftParentTable">The left or parent table</param>
	<param name="leftTableColumnsToCopy">An array of columns to copy from the left table</param>
	<param name="rightChildTable">The right or child table</param>
	<param name="rightTableColumnsToCopy">An array of columns to copy from the right table</param>
	<param name="joinType">Inner or left join</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[],CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTypes)">
	<summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
	<param name="leftParentTable">The left or parent table</param>
	<param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table</param>
	<param name="rightChildTable">The right or child table</param>
	<param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table</param>
	<param name="joinType">Inner or left join</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[],System.Data.DataRelation,CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.JoinTypes)">
	<summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
	<param name="leftParentTable">The left or parent table</param>
	<param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table</param>
	<param name="rightChildTable">The right or child table</param>
	<param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table</param>
	<param name="relation">A data table relation which shall be used for the joining</param>
	<param name="joinType">Inner or left join</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.CrossJoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[])">
	<summary>
     Cross join of two tables
 </summary>
	<param name="leftTable">A first datatable</param>
	<param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table</param>
	<param name="rightTable">A second datatable</param>
	<param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.AddPrefixesToColumnNames(System.Data.DataTable,System.Int32[],System.String)">
	<summary>
     Add a prefix to the names of the columns
 </summary>
	<param name="dataTable"></param>
	<param name="columnIndexes"></param>
	<param name="prefix">e. g. "orders."</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.AddSuffixesToColumnNames(System.Data.DataTable,System.Int32[],System.String)">
	<summary>
     Add a suffix to the names of the columns
 </summary>
	<param name="dataTable"></param>
	<param name="columnIndexes"></param>
	<param name="suffix">e. g. "-orders"</param>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.LookupUnqiueColumnName(System.Data.DataTable,System.String)">
	<summary>
     Lookup a new unique column name for a data table
 </summary>
	<param name="dataTable">The data table which shall get a new data column</param>
	<param name="suggestedColumnName">A column name suggestion</param>
	<returns>The suggested column name as it is or modified column name to be unique</returns>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ReArrangeDataColumnsException">
	<summary>
     An exception which gets thrown when converting data in the ReArrangeDataColumns methods
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ReArrangeDataColumns(System.Data.DataTable,System.String[])">
	<summary>
     Rearrange columns
 </summary>
	<param name="source">The source table with data</param>
	<param name="columnsToCopy">An array of column names which shall be copied in the specified order from the source table</param>
	<returns>A new and independent data table with copied data</returns>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ReArrangeDataColumns(System.Data.DataTable,System.Data.DataColumn[])">
	<summary>
     Rearrange columns and also change their data types
 </summary>
	<param name="source">The source table with data</param>
	<param name="destinationColumnSet">An array of columns as they shall be inserted into the result</param>
	<returns>A new and independent data table with copied data</returns>
	<remarks>
     The copy process requires that the names of the destination columns can be found in the columns collection of the source table. 
 </remarks>
	<example>
		<code language="vb">
         ReArrangeDataColumns(source, New System.Data.DataColumn() {New DataColumn("column1Name", GetType(String)), New DataColumn("column2Name", GetType(Integer))})
     </code>
	</example>
</member><member name="M:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables.ReArrangeDataColumns(System.Data.DataTable,System.Data.DataColumn[],System.Collections.ArrayList)">
	<summary>
     Rearrange columns and also change their data types
 </summary>
	<param name="source">The source table with data</param>
	<param name="destinationColumnSet">An array of columns as they shall be inserted into the result</param>
	<param name="ignoreConversionExceptionAndLogThemHere">In case of data conversion exceptions, log them here instead of throwing them immediately</param>
	<returns>A new and independent data table with copied data</returns>
	<remarks>
     The copy process requires that the names of the destination columns can be found in the columns collection of the source table. 
 </remarks>
	<example>
		<code language="vb">
         ReArrangeDataColumns(source, New System.Data.DataColumn() {New DataColumn("column1Name", GetType(String)), New DataColumn("column2Name", GetType(Integer))})
     </code>
	</example>
</member><member name="T:CompuMaster.camm.WebManager.Administration.Tools.Data.DataTables">
	<summary>
     Common DataTable operations
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.CleanUpUserAuthorization.ShowPotentialCleanupItems">
	<summary>
 Check for unnecessary user authorizations and show results to user
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.CleanUpUserAuthorization.CheckForPotentialCleanupItems">
	<summary>
 Check for unnecessary user authorizations and provide results as System.Data.DataTable
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.CleanUpUserAuthorization.CleanUpAuthorization(System.Object,System.EventArgs)">
	<summary>
 Cleanup authorized users that are already authorized by group
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.CleanUpUserAuthorization">
	<summary>
 Removes authorization of single users that are already authorized by a group
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AuthorizationsOverview">
	<summary>
     The security objects overview page
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.Apprights_New_Transmession">
	<summary>
     The Apprights_New_Transmession page 
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewUsers.ListApps">
	<summary>
 List all available applications and bind them on the DropDownList. PreSelect application where user comes from.
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewUsers.ListServerGroups">
	<summary>
 List all available servergroups and bind them on the DropDownList. PreSelect servergroup 0 (=all-item)
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewUsers.IsChecked(System.Web.UI.WebControls.CheckBox)">
	<summary>
 Is a checkbox checked or unchecked/missing?
 </summary>
	<param name="control"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewUsers.rptUserListItemBound(System.Object,System.Web.UI.WebControls.RepeaterItemEventArgs)">
	<summary>
 Bind user data to the repeater control
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewUsers.drpAppsSelectedAppChanged(System.Object,System.EventArgs)">
	<summary>
 Load new user data if selected application changes
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewUsers">
	<summary>
     A page to add any user to a perticular application
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewGroups.ListApps">
	<summary>
 List all available applications and bind them on the DropDownList. PreSelect application where user comes from.
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewGroups.ListServerGroups">
	<summary>
 List all available servergroups and bind them on the DropDownList. PreSelect servergroup 0 (=all-item)
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewGroups.IsGroupAuthorizedForApplication(System.Int32,System.Int32)">
	<summary>
 Checks whether the given group is authorization for the application
 </summary>
	<param name="groupId"></param>
	<param name="applicationId"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewGroups.IsGroupAuthorizedForApplication(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Checks whether the given group is authorization for the application
 </summary>
	<param name="groupId"></param>
	<param name="applicationId"></param>
	<remarks></remarks>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewGroups.IsChecked(System.Web.UI.WebControls.CheckBox)">
	<summary>
 Is a checkbox checked or unchecked/missing?
 </summary>
	<param name="control"></param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AppRightsNewGroups">
	<summary>
     A page to add any group to a perticular application
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AppRightsList.rptAppListItemBound(System.Object,System.Web.UI.WebControls.RepeaterItemEventArgs)">
	<summary>
 Bind the data of application/security object headers (and query depending users/groups JIT, too)
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AppRightsList">
	<summary>
    A page to view list of application for authorization
</summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AppRightsDeleteUsers">
	<summary>
     A page to delete any group from any application
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AppRightsDeleteTransmission">
	<summary>
     A page to delete AppRights Transmission
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AppRightsDeleteGroups">
	<summary>
     A page to delete any group from any application
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AppCheckUsersForMissingFlags">
	<summary>
     A page to list authorized users for an application with missing RequiredUserFlags
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Administration.AssemblyVersion">
	<summary>
 Required class because code security in ASP.NET 2 environments deny the access to the file version API of windows and the GetAssemblyFileVersion method would fail with a SecurityException
 </summary>
</member><member name="M:CompuMaster.camm.WebManager.Pages.Administration.AccessLevelsList.AccessLevelsList_Load(System.Object,System.EventArgs)">
	<summary>
     Page Load event - shows the list of access levels
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AccessLevelsList">
	<summary>
     A page to view accesslevels
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AccessLevelsNew">
	<summary>
     A page to create accesslevel
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AccessLevelsUpdate">
	<summary>
     A page to update accesslevel
 </summary>
</member><member name="T:CompuMaster.camm.WebManager.Pages.Administration.AccessLevelsDelete">
	<summary>
     A page to delete accesslevel
 </summary>
	<remarks>ATTENTION: access level with ID 0 is a valid access level and doesn't indicate an invalid one</remarks>
</member>
</members>
</doc>