<?xml version="1.0"?>
<doc>
<assembly>
<name>
CompuMaster.Data
</name>
</assembly>
<members>
<member name="T:CompuMaster.Data.DataManipulationResult">
 <summary>
 A container for a DataTable with its IDataAdapter and IDbCommand
 </summary>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataManipulationResult.#ctor">
 <summary>
 Create an empty instance 
 </summary>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataManipulationResult.#ctor(System.Data.IDbCommand)">
 <summary>
 Fill a DataManipulationResult using the given SELECT command for updating a modifed version on a later step
 </summary>
 <param name="command">The SELECT command for retrieving the data</param>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataManipulationResult.#ctor(System.Data.IDbCommand,System.Data.IDbDataAdapter)">
 <summary>
 Create a new instance of DataManipulationResults for updating queried data on a later step
 </summary>
 <param name="command">The SELECT command for retrieving the data</param>
 <param name="dataAdapter">An instance of data adapter using the SELECT command</param>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataManipulationResult.#ctor(System.Data.DataTable,System.Data.IDbCommand,System.Data.IDbDataAdapter)">
 <summary>
 Create a new instance of DataManipulationResults for updating queried data on a later step
 </summary>
 <param name="table">A new table which shall contain the queried data</param>
 <param name="command">The SELECT command for retrieving the data</param>
 <param name="dataAdapter">An instance of data adapter using the SELECT command</param>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataManipulationResult.UpdateChanges">
 <summary>
 Save all changes to the data source (requires an opened connection)
 </summary>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.DataManipulationResult.Table">
 <summary>
 The table which holds the queried data
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.DataManipulationResult.DataAdapter">
 <summary>
 The data adapter which is responsible to upload the changed data
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.DataManipulationResult.Command">
 <summary>
 The select command
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataManipulationResult.Dispose(System.Boolean)">
 <summary>
 Clean up
 </summary>
 <param name="disposing"></param>
 <remarks></remarks>
</member>
<member name="E:CompuMaster.Data.DataManipulationResult.DataChanged">
 <summary>
 The data in the table has been changed and is available for saving/uploading back
 </summary>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.DataQuery.DataProvider">
 <summary>
 A data provider which implements the System.Data.IDbConnection/IDbCommand interface
 </summary>
</member>
<member name="P:CompuMaster.Data.DataQuery.DataProvider.Title">
 <summary>
 A common title for the data connector
 </summary>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.DataProvider.GetAssemblyTypes(System.Reflection.Assembly)">
 <summary>
 GetAssemblyTypes might throw System.Reflection.ReflectionTypeLoadException - by .NET exception handling it's required to put this into a separate method to be able to catch this exception
 </summary>
 <param name="assembly"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.DataProvider.GetTypeInterfaces(System.Type)">
 <summary>
 GetTypeInterfaces might throw System.Reflection.ReflectionTypeLoadException - by .NET exception handling it's required to put this into a separate method to be able to catch this exception
 </summary>
 <param name="type"></param>
 <returns></returns>
</member>
<member name="T:CompuMaster.Data.DataQuery.TestFile">
 <summary>
 Provides access to a temporary file path plus an automatic cleanup of the test file after this class instance when disposing
 </summary>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.DataQuery.DataException">
 <summary>
     Data execution exceptions with details on the executed IDbCommand
 </summary>
</member>
<member name="M:CompuMaster.Data.DataQuery.DataException.ConvertParameterCollectionToString(System.Data.IDataParameterCollection)">
 <summary>
     Convert the collection with all the parameters to a plain text string
 </summary>
 <param name="parameters">An IDataParameterCollection of a IDbCommand</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.DataException.ToString">
 <summary>
 The complete and detailed exception information inclusive the command text
 </summary>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="P:CompuMaster.Data.DataQuery.DataException.DetailsOnCommandEnvironment">
 <summary>
 Provides simplified overview on most important details on command text and command environment
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.DataException.ToStringWithoutExceptionDetails">
 <summary>
 Detailed exception details without details on command environment
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.DataQuery.DataReaderUtils">
 <summary>
 Methods for simplifying the handling with data readers
 </summary>
</member>
<member name="M:CompuMaster.Data.DataQuery.DataReaderUtils.ContainsColumn(System.Data.IDataReader,System.String)">
 <summary>
 Lookup if the reader contains a result column with the requested name
 </summary>
 <param name="reader">A data reader object</param>
 <param name="columnName">The name of the column which shall be identified</param>
 <returns>True if the column exist else False</returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.DataReaderUtils.ColumnNames(System.Data.IDataReader)">
 <summary>
 Return the column names of a data reader as a String array
 </summary>
 <param name="reader">A data reader object</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.DataReaderUtils.DataTypes(System.Data.IDataReader)">
 <summary>
 Return the column data types of a data reader as an array
 </summary>
 <param name="reader">A data reader object</param>
 <returns></returns>
</member>
<member name="T:CompuMaster.Data.DataQuery.NamespaceDoc">
 <summary>
     Querying data from all available types of data sources
 </summary>
 <remarks>
 </remarks>
</member>
<member name="T:CompuMaster.Data.DataQuery.AnyIDataProvider">
 <summary>
     Common routines to query data from any data provider
 </summary>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.CreateConnection(CompuMaster.Data.DataQuery.DataProvider)">
 <summary>
     Create a new database connection by reflection of a type name
 </summary>
 <param name="provider">A data provider</param>
 <returns>The created connection object as an IDbConnection</returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.CreateConnection(CompuMaster.Data.DataQuery.DataProvider,System.String)">
 <summary>
     Create a new database connection by reflection of a type name
 </summary>
 <param name="provider">A data provider</param>
 <param name="connectionString">A connection string to be used for this connection</param>
 <returns>The created connection object as an IDbConnection</returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.CreateConnection(System.String,System.String)">
 <summary>
     Create a new database connection by reflection of a type name
 </summary>
 <param name="assemblyName">The assembly which implements the desired connection type</param>
 <param name="connectionTypeName">The case-insensitive type name of the connection class, e. g. System.Data.SqlClient.SqlConnection</param>
 <returns>The created connection object as an IDbConnection</returns>
 <remarks>
     Errors will be thrown in case of unresolvable parameter values or if the created type can't be casted into an IDbConnection.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.CreateConnection(System.String,System.String,System.String)">
 <summary>
     Create a new database connection by reflection of a type name
 </summary>
 <param name="assemblyName">The assembly which implements the desired connection type</param>
 <param name="connectionTypeName">The case-insensitive type name of the connection class, e. g. System.Data.SqlClient.SqlConnection</param>
 <param name="connectionString">A connection string to be used for this connection</param>
 <returns>The created connection object as an IDbConnection</returns>
 <remarks>
     Errors will be thrown in case of unresolvable parameter values or if the created type can't be casted into an IDbConnection.
 </remarks>
</member>
<member name="T:CompuMaster.Data.DataQuery.AnyIDataProvider.Automations">
 <summary>
     Automations for the connection in charge
 </summary>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations,System.Int32)">
 <summary>
     Executes a command without returning any data
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
 <param name="commandTimeout">A timeout value in seconds for the command object (negative values will be ignored and leave the timeout value on default)</param>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteNonQuery(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command without returning any data
 </summary>
 <param name="dbCommand">The command with an assigned connection property value</param>
 <param name="automations">Automation options for the connection</param>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command without returning any data
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
 <summary>
     Executes a command without returning any data
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteScalar(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command scalar and returns the value
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteScalar(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command scalar and returns the value
 </summary>
 <param name="dbCommand">The command with an assigned connection property value</param>
 <param name="automations">Automation options for the connection</param>
</member>
<member name="T:CompuMaster.Data.DataQuery.AnyIDataProvider.DataException">
 <summary>
     Data execution exceptions with details on the executed IDbCommand
 </summary>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.DataException.ToString">
 <summary>
     The complete and detailed exception information inclusive the command text
 </summary>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteScalar(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
 <summary>
     Executes a command scalar and returns the value
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstColumnIntoArrayList(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first column
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstColumnIntoArrayList(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first column
 </summary>
 <param name="dbCommand">The command object which shall be executed</param>
 <param name="automations">Automation options for the connection</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstColumnIntoArrayList(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
 <summary>
     Executes a command with a data reader and returns the values of the first column
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoDictionaryEntryArray(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
 <param name="dbCommand">The prepared command to the database</param>
 <param name="automations">Automation options for the connection</param>
 <returns>An array of DictionaryEntry with the values of the first column as the key element and the second column values in the value element of the DictionaryEntry</returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoDictionaryEntryArray(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
 <returns>An array of DictionaryEntry with the values of the first column as the key element and the second column values in the value element of the DictionaryEntry</returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoHashtable(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first column
 </summary>
 <param name="dbCommand">The command object which shall be executed</param>
 <param name="automations">Automation options for the connection</param>
 <returns>A hashtable with the values of the first column in the hashtable's key field and the second column values in the hashtable's value field</returns>
 <remarks>
 ATTENTION: Please note that multiple but equal values from the first column will result in 1 key/value pair since hashtables use a unique key and override the value with the last assignment. Alternatively you may want to receive an array of DictionaryEntry.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoHashtable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
 <returns>A hashtable with the values of the first column in the hashtable's key field and the second column values in the hashtable's value field</returns>
 <remarks>
 ATTENTION: Please note that multiple but equal values from the first column will result in 1 key/value pair since hashtables use a unique key and override the value with the last assignment. Alternatively you may want to receive an array of DictionaryEntry.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoGenericKeyValuePairs``2(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
 <param name="dbCommand">The command object which shall be executed</param>
 <param name="automations">Automation options for the connection</param>
 <returns>A list of KeyValuePairs with the values of the first column in the key field and the second column values in the value field, NULL values are initialized with null (Nothing in VisualBasic)</returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoGenericNullableKeyValuePairs``2(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
 <param name="dbCommand">The command object which shall be executed</param>
 <param name="automations">Automation options for the connection</param>
 <returns>A list of KeyValuePairs with the values of the first column in the key field and the second column values in the value field</returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoGenericDictionary``2(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
 <param name="dbCommand">The command object which shall be executed</param>
 <param name="automations">Automation options for the connection</param>
 <returns>A dictionary of KeyValuePairs with the values of the first column in the key field and the second column values in the value field, NULL values are initialized with null (Nothing in VisualBasic)</returns>
 <remarks>
 ATTENTION: Please note that multiple but equal values from the first column will result in 1 key/value pair since hashtables use a unique key and override the value with the last assignment. Alternatively you may want to receive a List of KeyValuePairs.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoGenericNullableDictionary``2(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
 <param name="dbCommand">The command object which shall be executed</param>
 <param name="automations">Automation options for the connection</param>
 <returns>A dictionary of KeyValuePairs with the values of the first column in the key field and the second column values in the value field</returns>
 <remarks>
 ATTENTION: Please note that multiple but equal values from the first column will result in 1 key/value pair since hashtables use a unique key and override the value with the last assignment. Alternatively you may want to receive a List of KeyValuePairs.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReaderAndPutFirstTwoColumnsIntoHashtable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
 <summary>
     Executes a command with a data reader and returns the values of the first two columns
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <returns>A hashtable with the values of the first column in the hashtable's key field and the second column values in the hashtable's value field</returns>
 <remarks>
 ATTENTION: Please note that multiple but equal values from the first column will result in 1 key/value pair since hashtables use a unique key and override the value with the last assignment. Alternatively you may want to receive an array of DictionaryEntry.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations,System.Int32)">
 <summary>
     Executes a command and return the data reader object for it
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
 <param name="commandTimeout">A timeout value in seconds for the command object (negative values will be ignored and leave the timeout value on default)</param>
 <returns></returns>
 <remarks>
     Automations can only open a connection, but never close. This is because you have to close the connection by yourself AFTER you walked through the data reader.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReader(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command and return the data reader object for it
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.ExecuteReader(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Executes a command and return the data reader object for it
 </summary>
 <param name="dbCommand">The command with an assigned connection property value</param>
 <param name="automations">Automation options for the connection</param>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.FillDataTable(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations,System.String)">
 <summary>
     Fill a new data table with the result of a command
 </summary>
 <param name="dbCommand">The command object</param>
 <param name="automations">Automation options for the connection</param>
 <param name="tableName">The name for the new table</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.FillDataTable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations,System.String,System.Int32)">
 <summary>
     Fill a new data table with the result of a command
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
 <param name="tableName">The name for the new table</param>
 <param name="commandTimeout">A timeout value in seconds for the command object (negative values will be ignored and leave the timeout value on default)</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.FillDataTable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations,System.String)">
 <summary>
     Fill a new data table with the result of a command
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
 <param name="tableName">The name for the new table</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.FillDataTable(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[],CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Fill a new data table with the result of a command
 </summary>
 <param name="dbConnection">The connection to the database</param>
 <param name="commandText">The command text</param>
 <param name="commandType">The command type</param>
 <param name="sqlParameters">An optional list of SqlParameters</param>
 <param name="automations">Automation options for the connection</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.FillDataTables(System.Data.IDbCommand,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
     Fill a new data table with the result of a command
 </summary>
 <param name="dbCommand">The command object</param>
 <param name="automations">Automation options for the connection</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.CloseAndDisposeConnection(System.Data.IDbConnection)">
 <summary>
     Securely close and dispose a database connection
 </summary>
 <param name="connection">The connection to close and dispose</param>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.CloseConnection(System.Data.IDbConnection)">
 <summary>
     Securely close a database connection
 </summary>
 <param name="connection">The connection to close</param>
</member>
<member name="M:CompuMaster.Data.DataQuery.AnyIDataProvider.OpenConnection(System.Data.IDbConnection)">
 <summary>
     Open a database connection if it is not already opened
 </summary>
 <param name="connection">The connection to open</param>
</member>
<member name="T:CompuMaster.Data.DataQuery.Connections">
 <summary>
 A factory for common data connection types, usable on most platforms
 </summary>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.MicrosoftAccessOleDbConnection(System.String)">
 <summary>
 A most probably working Microsoft Access connection which uses the most appropriate, installed OleDB provider of the current machine
 </summary>
 <param name="path"></param>
 <returns>An OleDB data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.MicrosoftAccessOleDbConnection(System.String,System.String)">
 <summary>
 A most probably working Microsoft Access connection which uses the most appropriate, installed OleDB provider of the current machine
 </summary>
 <param name="path"></param>
 <param name="databasePassword"></param>
 <returns>An OleDB data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.MicrosoftAccessOdbcConnection(System.String)">
 <summary>
 A most probably working Microsoft Access connection which uses the most appropriate, installed ODBC driver of the current machine
 </summary>
 <param name="path"></param>
 <returns>An ODBC data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.MicrosoftAccessOdbcConnection(System.String,System.String)">
 <summary>
 A most probably working Microsoft Access connection which uses the most appropriate, installed ODBC driver of the current machine
 </summary>
 <param name="path"></param>
 <param name="databasePassword"></param>
 <returns>An ODBC data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.TextCsvConnection(System.String)">
 <summary>
 A most probably working Microsoft Access connection which uses the most appropriate, installed ODBC driver of the current machine
 </summary>
 <param name="path"></param>
 <returns>An ODBC data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.MicrosoftAccessConnection(System.String)">
 <summary>
 A most probably working Microsoft Access connection which uses the most appropriate, installed OleDB provider or ODBC driver of the current machine
 </summary>
 <param name="path"></param>
 <returns>An OleDB or ODBC data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.MicrosoftAccessConnection(System.String,System.String)">
 <summary>
 A most probably working Microsoft Access connection which uses the most appropriate, installed OleDB provider or ODBC driver of the current machine
 </summary>
 <param name="path"></param>
 <param name="databasePassword"></param>
 <returns>An OleDB or ODBC data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.MicrosoftExcelConnection(System.String,System.Boolean,System.Boolean)">
 <summary>
 A most probably working Microsoft Excel connection which uses the most appropriate, installed OleDB provider or ODBC driver of the current machine
 </summary>
 <param name="path"></param>
 <param name="firstRowContainsHeaders"></param>
 <param name="readAllColumnsAsTextOnly"></param>
 <returns>An OleDB or ODBC data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.MicrosoftExcelOdbcConnection(System.String,System.Boolean,System.Boolean)">
 <summary>
 A most probably working Microsoft Excel connection which uses the most appropriate, installed ODBC driver of the current machine
 </summary>
 <param name="path"></param>
 <param name="firstRowContainsHeaders"></param>
 <param name="readAllColumnsAsTextOnly"></param>
 <returns>An ODBC data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.MicrosoftExcelOleDbConnection(System.String,System.Boolean,System.Boolean)">
 <summary>
 A most probably working Microsoft Excel connection which uses the most appropriate, installed OleDB provider of the current machine
 </summary>
 <param name="path"></param>
 <param name="firstRowContainsHeaders"></param>
 <param name="readAllColumnsAsTextOnly"></param>
 <returns>An OleDB data connection to the requested file</returns>
 <remarks></remarks>
 <exception cref="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException" />
</member>
<member name="F:CompuMaster.Data.DataQuery.Connections.ProbeOleDbOrOdbcProviderVerboseMode">
 <summary>
 Verbose mode creates some additional console output on probe exceptions
 </summary>
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.ProbeOleDBProvider(Microsoft.VisualBasic.TriState@,System.String)">
 <summary>
 Test an OLE DB connection if result hasn't been cached, yet
 </summary>
 <param name="resultCache">A reference to a cache variable</param>
 <param name="connectionString">A working connection string using the provider which shall be tested</param>
 <returns>True if the connectionstring works, False if not</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.ProbeOdbcDBProvider(Microsoft.VisualBasic.TriState@,System.String)">
 <summary>
 Test an ODBC connection if result hasn't been cached, yet
 </summary>
 <param name="resultCache">A reference to a cache variable</param>
 <param name="connectionString">A working connection string using the provider which shall be tested</param>
 <returns>True if the connectionstring works, False if not</returns>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.DataQuery.Connections.OleDbTableDescriptor">
 <summary>
 Represents a table identifier in an OleDB data source
 </summary>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.DataQuery.Connections.OleDbTableDescriptor.SchemaName">
 <summary>
 The schema name (if supported by the data source)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.DataQuery.Connections.OleDbTableDescriptor.TableName">
 <summary>
 The table name
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.OleDbTableDescriptor.ToString">
 <summary>
 The full table identifier as it can be used in select statements
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.DataQuery.Connections.OdbcTableDescriptor">
 <summary>
 Represents a table identifier in an ODBC data source
 </summary>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.DataQuery.Connections.OdbcTableDescriptor.SchemaName">
 <summary>
 The schema name (if supported by the data source)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.DataQuery.Connections.OdbcTableDescriptor.TableName">
 <summary>
 The table name
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.OdbcTableDescriptor.ToString">
 <summary>
 The full table identifier as it can be used in select statements
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.EnumerateTablesAndViewsInOleDbDataSource(System.Data.OleDb.OleDbConnection)">
 <summary>
 Enumerate all tables/views which can be used for SQL SELECT statements
 </summary>
 <param name="openedConnection"></param>
 <returns>The DictionaryEntry contains the table/view name in the key field, the schema name in the value field</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.Connections.EnumerateTablesAndViewsInOdbcDataSource(System.Data.Odbc.OdbcConnection)">
 <summary>
 Enumerate all tables/views which can be used for SQL SELECT statements
 </summary>
 <param name="openedConnection"></param>
 <returns>The DictionaryEntry contains the table/view name in the key field, the schema name in the value field</returns>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException">
 <summary>
 In case that no usable data drivers are available on a x64 platform, this exception will be fired
 </summary>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException.AlternativeProvidersProbeResults">
 <summary>
 A collection of probe results for alternative providers at the running machine
 </summary>
 <returns></returns>
</member>
<member name="P:CompuMaster.Data.DataQuery.Connections.Office2010x64OleDbOdbcEngineRequiredException.RecommendedDownloadLink">
 <summary>
 Recommended link for the user to download and install missing components on x64 systems
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.DataQuery.PlatformTools">
 <summary>
 Identify the runtime platform
 </summary>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.PlatformTools.CurrentClrRuntime">
 <summary>
 Indicates wether the current application runs in 32bit mode or in 64bit mode (relevant e.g. for the ODBC drivers to load)
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.PlatformTools.CreateDataConnection(System.String,System.String)">
 <summary>
 Create a provider-independent IDbConnection based on the given textual information
 </summary>
 <param name="provider">SqlClient, ODBC or OleDB</param>
 <param name="connectionString"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.PlatformTools.InstalledOdbcDrivers(CompuMaster.Data.DataQuery.PlatformTools.TargetPlatform)">
 <summary>
 Enumerates the ODBC drivers currently installed on the running machine
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataQuery.PlatformTools.InstalledOleDbProviders">
 <summary>
 Enumerates the OLE DB providers currently installed on the running machine
 </summary>
 <returns>The DictionaryEntry contains the name of the OLE DB provider in the key field, the value field contains the provider description</returns>
 <remarks>
 <para>DELAY WARNING: the enumeration by registry keys will take approx. 1,000 ms (!)</para>
 <para>CONTENT WARNING: the enumeration will return ALL registered providers, but you may not be able to use them because of 32bit vs. 64bit loading problems</para>
 </remarks>
 <exception cref="T:System.NotImplementedException">Non-Windows(Win32NT)-Platforms are not yet supported</exception>
</member>
<member name="M:CompuMaster.Data.DataQuery.PlatformTools.InstalledOleDbProviders_SearchKeys(Microsoft.Win32.RegistryKey)">
 <summary>
 Search OLE DB provider registry keys
 </summary>
 <param name="key"></param>
 <returns></returns>
 <remarks></remarks>
 <exception cref="T:System.NotImplementedException">Non-Windows(Win32NT)-Platforms are not yet supported</exception>
</member>
<member name="T:CompuMaster.Data.ReArrangeDataColumnsException">
 <summary>
     An exception which gets thrown when converting data in the ReArrangeDataColumns methods
 </summary>
 <remarks>
 </remarks>
 <history>
 	[wezel]	14.04.2005	Created
 </history>
</member>
<member name="T:CompuMaster.Data.Csv">
 <summary>
     Provides simplified access to CSV files
 </summary>
</member>
<member name="T:CompuMaster.Data.Csv.ReadLineEncodings">
 <summary>
 Line encoding of CSV files 
 </summary>
</member>
<member name="F:CompuMaster.Data.Csv.ReadLineEncodings.None">
 <summary>
 Force reading line break in cell value as row break
 </summary>
</member>
<member name="F:CompuMaster.Data.Csv.ReadLineEncodings.RowBreakCrLfOrCrOrLf_CellLineBreakCrLfOrCrOrLf">
 <summary>
 WARNING: FEATURE STILL BETA DUE TO DESIGN ISSUES: Read lines for rows and detect cell line breaks by incomplete column data per row
 </summary>
 <remarks>
 CURRENT DESIGN ISSUE WITH TROUBLE: LineBreaks in first and last column can't be identified if its for the previous row or for the next row since this data is missing in CSV file
 </remarks>
</member>
<member name="T:CompuMaster.Data.Csv.ReadLineEncodingAutoConversion">
 <summary>
 Auto conversion of detected line breaks in cell to platform specific linebreak
 </summary>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeMultipleColumnSeparatorCharsAsOne">Specifies whether multiple seperator characters should be recognized as one</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Boolean)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="cultureFormatProvider"></param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeDoubledColumnSeparatorCharAsOne">Currently without purpose</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Boolean)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="cultureFormatProvider"></param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeDoubledColumnSeparatorCharAsOne">Currently without purpose</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,System.Char,System.Char,System.Boolean,System.Boolean)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="RecognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeDoubledColumnSeparatorCharAsOne">Currently without purpose</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,System.Int32[],System.String,System.Boolean)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,System.Int32[],System.Text.Encoding,System.Globalization.CultureInfo,System.Boolean)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="cultureFormatProvider"></param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,System.Globalization.CultureInfo,System.Int32[],System.Boolean)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="cultureFormatProvider"></param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,System.Int32[],System.Boolean)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion,System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeMultipleColumnSeparatorCharsAsOne">Specifies whether multiple seperator characters should be recognized as one</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Boolean)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="cultureFormatProvider"></param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeDoubledColumnSeparatorCharAsOne">Currently without purpose</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Boolean)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="cultureFormatProvider"></param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeDoubledColumnSeparatorCharAsOne">Currently without purpose</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion,System.Char,System.Char,System.Boolean,System.Boolean)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="RecognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeDoubledColumnSeparatorCharAsOne">Currently without purpose</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion,System.Int32[],System.String,System.Boolean)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvFile(System.String,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion,System.Int32[],System.Text.Encoding,System.Globalization.CultureInfo,System.Boolean)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="cultureFormatProvider"></param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion,System.Globalization.CultureInfo,System.Int32[],System.Boolean)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="cultureFormatProvider"></param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.ReadDataTableFromCsvString(System.String,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion,System.Int32[],System.Boolean)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="csvContainsColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path"></param>
 <param name="dataTable"></param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path"></param>
 <param name="dataTable"></param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,System.Int32[],System.Globalization.CultureInfo,System.String)">
 <summary>
     Write to a CSV with fixed column widths
 </summary>
 <param name="path">The path of the CSV file</param>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="fileEncoding">A file encoding (default UTF-8)</param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.Int32[],System.Globalization.CultureInfo,System.String)">
 <summary>
     Write to a CSV with fixed column widths
 </summary>
 <param name="path">The path of the CSV file</param>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="fileEncoding">A file encoding (default UTF-8)</param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.String)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path">The path of the CSV file</param>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="fileEncoding">A file encoding (default UTF-8)</param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.Globalization.CultureInfo,System.String)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path">The path of the CSV file</param>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="fileEncoding">A file encoding (default UTF-8)</param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.String,System.String,System.Char)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path">The path of the CSV file</param>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="fileEncoding">A file encoding (default UTF-8)</param>
 <param name="columnSeparator">A column separator (culture default if empty value)</param>
 <param name="recognizeTextBy">Recognize text by this character (default: quotation marks)</param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.Globalization.CultureInfo,System.String,System.String,System.Char)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path">The path of the CSV file</param>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="fileEncoding">A file encoding (default UTF-8)</param>
 <param name="columnSeparator">A column separator (culture default if empty value)</param>
 <param name="recognizeTextBy">Recognize text by this character (default: quotation marks)</param>
</member>
<member name="M:CompuMaster.Data.Csv.ConvertDataTableToTextAsStringBuilder(System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.String,System.Char)">
 <summary>
     Convert the datatable to a string based, comma-separated format
 </summary>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="columnSeparator">A column separator (culture default if empty value)</param>
 <param name="recognizeTextBy">Recognize text by this character (default: quotation marks)</param>
 <returns>A formatted text output</returns>
</member>
<member name="M:CompuMaster.Data.Csv.ConvertDataTableToTextAsStringBuilder(System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.Globalization.CultureInfo,System.String,System.Char)">
 <summary>
     Convert the datatable to a string based, comma-separated format
 </summary>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="columnSeparator">A column separator (culture default if empty value)</param>
 <param name="recognizeTextBy">Recognize text by this character (default: quotation marks)</param>
 <returns>A formatted text output</returns>
</member>
<member name="M:CompuMaster.Data.Csv.ConvertDataTableToTextAsStringBuilder(System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.Int32[])">
 <summary>
     Convert the datatable to a string based, comma-separated format
 </summary>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <returns>The table as text with comma-separated structure</returns>
</member>
<member name="M:CompuMaster.Data.Csv.ConvertDataTableToTextAsStringBuilder(System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.Globalization.CultureInfo,System.Int32[])">
 <summary>
     Convert the datatable to a string based, comma-separated format
 </summary>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <returns>The table as text with comma-separated structure</returns>
</member>
<member name="M:CompuMaster.Data.Csv.ConvertDataTableToText(System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.String,System.Char)">
 <summary>
     Convert the datatable to a string based, comma-separated format (for large tables, better use ConvertDataTableToTextAsStringBuilder to avoid System.OutOfMemoryExceptions)
 </summary>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="columnSeparator">A column separator (culture default if empty value)</param>
 <param name="recognizeTextBy">Recognize text by this character (default: quotation marks)</param>
 <returns>A formatted text output</returns>
</member>
<member name="M:CompuMaster.Data.Csv.ConvertDataTableToText(System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.Int32[])">
 <summary>
     Convert the datatable to a string based, comma-separated format (for large tables, better use ConvertDataTableToTextAsStringBuilder to avoid System.OutOfMemoryExceptions)
 </summary>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Add a row with column headers on the top</param>
 <param name="cultureFormatProvider">A culture format provider which declares list and decimal separators, etc.</param>
 <param name="columnWidths">An array of integers specifying the fixed column widths</param>
 <returns>The table as text with comma-separated structure</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,System.String,System.String,System.Char,System.Char)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.String,System.String,System.Char,System.Char)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="dataTable">A datatable which shall be exported</param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvString(System.Data.DataTable,System.Boolean,System.String,System.Char,System.Char,System.Char)">
 <summary>
     Create a CSV table (contains BOF signature for unicode encodings)
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A string containing the CSV table with integrated file encoding for writing with e.g. System.IO.File.WriteAllText()</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFileStringWithTextEncoding(System.Data.DataTable,System.Boolean,System.String,System.String,System.Char,System.Char)">
 <summary>
     Create a CSV table (contains BOF signature for unicode encodings)
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A string containing the CSV table with integrated file encoding for writing with e.g. System.IO.File.WriteAllText()</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvFileStringWithTextEncoding(System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.String,System.String,System.Char,System.Char)">
 <summary>
     Create a CSV table (contains BOF signature for unicode encodings)
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A string containing the CSV table with integrated file encoding for writing with e.g. System.IO.File.WriteAllText()</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvTextString(System.Data.DataTable,System.Boolean,System.String,System.Char,System.Char)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A string containing the CSV table</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvTextString(System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.String,System.Char,System.Char)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A string containing the CSV table</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvBytes(System.Data.DataTable,System.Boolean,System.String,System.Char,System.Char,System.Char)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A string containing the CSV table</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvBytes(System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.String,System.Char,System.Char,System.Char)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A string containing the CSV table</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvBytes(System.Data.DataTable,System.Boolean,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Char)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="cultureFormatProvider">A globalization information object for the conversion of all data to strings</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <returns>A string containing the CSV table</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvBytes(System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Char)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="cultureFormatProvider">A globalization information object for the conversion of all data to strings</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <returns>A string containing the CSV table</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvMemoryStream(System.Data.DataTable,System.Boolean,System.String,System.String,System.Char,System.Char)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A memory stream containing all texts as bytes in Unicode format</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataTableToCsvMemoryStream(System.Data.DataTable,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.String,System.String,System.Char,System.Char)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="writeCsvColumnHeaders">Indicates wether column headers are present</param>
 <param name="fileEncoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A memory stream containing all texts as bytes in Unicode format</returns>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataViewToCsvFile(System.String,System.Data.DataView)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path"></param>
 <param name="dataview"></param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataViewToCsvFile(System.String,System.Data.DataView,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path"></param>
 <param name="dataview"></param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataViewToCsvFile(System.String,System.Data.DataView,System.Boolean,System.Globalization.CultureInfo,System.String,System.String,System.Char)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path"></param>
 <param name="dataView"></param>
 <param name="writeCsvColumnHeaders"></param>
 <param name="cultureFormatProvider"></param>
 <param name="fileEncoding"></param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataViewToCsvFile(System.String,System.Data.DataView,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.Globalization.CultureInfo,System.String,System.String,System.Char)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path"></param>
 <param name="dataView"></param>
 <param name="writeCsvColumnHeaders"></param>
 <param name="cultureFormatProvider"></param>
 <param name="fileEncoding"></param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataViewToCsvFile(System.String,System.Data.DataView,System.Boolean,System.String,System.String,System.Char,System.Char)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path"></param>
 <param name="dataView"></param>
 <param name="writeCsvColumnHeaders"></param>
 <param name="fileEncoding"></param>
 <param name="columnSeparator"></param>
 <param name="recognizeTextBy"></param>
 <param name="decimalSeparator"></param>
</member>
<member name="M:CompuMaster.Data.Csv.WriteDataViewToCsvFile(System.String,System.Data.DataView,System.Boolean,CompuMaster.Data.Csv.WriteLineEncodings,System.String,System.String,System.Char,System.Char)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path"></param>
 <param name="dataView"></param>
 <param name="writeCsvColumnHeaders"></param>
 <param name="fileEncoding"></param>
 <param name="columnSeparator"></param>
 <param name="recognizeTextBy"></param>
 <param name="decimalSeparator"></param>
</member>
<member name="T:CompuMaster.Data.CsvTools">
 <summary>
     Provides simplified access to CSV files
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvReader(System.IO.StreamReader,System.Boolean,System.Globalization.CultureInfo,System.Int32[],System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="reader">A stream reader targetting CSV data</param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnWidths">An array of column widths in their order</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvFile(System.String,System.Boolean,System.Int32[],System.String,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnWidths">An array of column widths in their order</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvFile(System.String,System.Boolean,System.Int32[],System.Text.Encoding,System.Globalization.CultureInfo,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnWidths">An array of column widths in their order</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="cultureFormatProvider"></param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvString(System.String,System.Boolean,System.Int32[],System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnWidths">An array of column widths in their order</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvString(System.String,System.Boolean,System.Globalization.CultureInfo,System.Int32[],System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="cultureFormatProvider"></param>
 <param name="columnWidths">An array of column widths in their order</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.SplitFixedCsvLineIntoCellValues(System.String@,System.Collections.ArrayList,System.Int32@,System.Int32[])">
 <summary>
     Split a line content into separate column values and add them to the output list
 </summary>
 <param name="lineContent">The line content as it has been read from the CSV file</param>
 <param name="outputList">An array list which shall hold the separated column values</param>
 <param name="startPosition">The start position to which the columnWidhts are related to</param>
 <param name="columnWidths">An array of column widths in their order</param>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.SplitFixedCsvLineIntoCellValuesIsNewColumnPosition(System.Int32,System.Int32,System.Int32[])">
 <summary>
     Calculate if the current position is the first position of a new column
 </summary>
 <param name="currentPosition">The current position in the whole document</param>
 <param name="startPosition">The start position to which the columnWidhts are related to</param>
 <param name="columnWidths">An array containing the definitions of the column widths</param>
 <returns>True if the current position identifies a new column value, otherwise False</returns>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvFile(System.String,System.Boolean,System.String,System.Char,System.Char,System.Boolean,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeMultipleColumnSeparatorCharsAsOne">Specifies whether we should treat multiple column seperators as one</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvFile(System.String,System.Boolean,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV file
 </summary>
 <param name="Path">The path of the file</param>
 <param name="IncludesColumnHeaders">Indicates wether column headers are present</param>
 <param name="Encoding">The text encoding of the file</param>
 <param name="cultureFormatProvider"></param>
 <param name="RecognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeMultipleColumnSeparatorCharsAsOne">Specifies whether we should treat multiple column seperators as one</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvReader(System.IO.StreamReader,System.Boolean,System.Globalization.CultureInfo,System.Char,System.Char,System.Boolean,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="reader">A stream reader targetting CSV data</param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeMultipleColumnSeparatorCharsAsOne">Specifies whether we should treat multiple column seperators as one</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.SplitCsvLineIntoCellValues(System.String@,System.Collections.ArrayList,System.Int32@,System.Char,System.Char,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion,System.Int32)">
 <summary>
     Split a line content into separate column values and add them to the output list
 </summary>
 <param name="lineContent">The line content as it has been read from the CSV file</param>
 <param name="outputList">An array list which shall hold the separated column values</param>
 <param name="startposition"></param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text string</param>
 <param name="recognizeMultipleColumnSeparatorCharsAsOne">Specifies whether we should treat multiple column seperators as one</param>
 <param name="detectCompletedRowLineBasedOnRequiredColumnCount">When reading CSV files with equal line break and cell break encoding, detect full row lines by column count</param>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvString(System.String,System.Boolean,System.Char,System.Char,System.Boolean,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeMultipleColumnSeparatorCharsAsOne">Currently without purpose</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.ReadDataTableFromCsvString(System.String,System.Boolean,System.Globalization.CultureInfo,System.Char,System.Boolean,System.Boolean,CompuMaster.Data.Csv.ReadLineEncodings,CompuMaster.Data.Csv.ReadLineEncodingAutoConversion)">
 <summary>
     Read from a CSV table
 </summary>
 <param name="data">The content of a CSV file</param>
 <param name="IncludesColumnHeaders">Indicates wether column headers are present</param>
 <param name="cultureFormatProvider"></param>
 <param name="RecognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="recognizeMultipleColumnSeparatorCharsAsOne">Currently without purpose</param>
 <param name="convertEmptyStringsToDBNull">Convert values with empty strings automatically to DbNull</param>
 <returns></returns>
 <remarks>
 In case of duplicate column names, all additional occurances of the same column name will be modified to use a unique column name
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.ConvertDBNullValuesToEmptyStrings(System.Data.DataTable)">
 <summary>
     Convert DBNull values to empty strings
 </summary>
 <param name="data">The data which might contain DBNull values</param>
</member>
<member name="M:CompuMaster.Data.CsvTools.ConvertEmptyStringsToDBNullValue(System.Data.DataTable)">
 <summary>
     Convert empty string values to DBNull
 </summary>
 <param name="data">The data which might contain empty strings</param>
</member>
<member name="M:CompuMaster.Data.CsvTools.FixedLengthText(System.String,System.Int32,System.Boolean)">
 <summary>
     Trims a string to exactly the required fix size
 </summary>
 <param name="text"></param>
 <param name="fixedLengthSize"></param>
 <param name="alignedRight">Add additionally required spaces on the left (True) or on the right (False)</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.CsvTools.ConvertDataTableToCsv(System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.Int32[],CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Convert the datatable to a string based, comma-separated format
 </summary>
 <param name="dataTable"></param>
 <param name="includesColumnHeaders"></param>
 <param name="cultureFormatProvider"></param>
 <param name="columnWidths"></param>
</member>
<member name="M:CompuMaster.Data.CsvTools.ConvertDataTableToCsv(System.Data.DataTable,System.Boolean,System.Globalization.CultureInfo,System.String,System.Char,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Convert the datatable to a string based, comma-separated format
 </summary>
 <param name="dataTable"></param>
 <param name="includesColumnHeaders"></param>
 <param name="cultureFormatProvider"></param>
 <param name="columnSeparator"></param>
 <param name="recognizeTextBy"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.CsvTools.WriteDataTableToCsvFile(System.String,System.Data.DataTable,System.Boolean,System.String,System.String,System.Char,System.Char,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="dataTable"></param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator">A character indicating the decimal separator in the text string</param>
</member>
<member name="M:CompuMaster.Data.CsvTools.WriteDataTableToCsvBytes(System.Data.DataTable,System.Boolean,System.String,System.Char,System.Char,System.Char,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A string containing the CSV table</returns>
</member>
<member name="M:CompuMaster.Data.CsvTools.WriteDataTableToCsvBytes(System.Data.DataTable,System.Boolean,System.Text.Encoding,System.Globalization.CultureInfo,System.Char,System.Char,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="cultureFormatProvider">A globalization information object for the conversion of all data to strings</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <returns>A string containing the CSV table</returns>
</member>
<member name="M:CompuMaster.Data.CsvTools.WriteDataTableToCsvMemoryStream(System.Data.DataTable,System.Boolean,System.String,System.String,System.Char,System.Char,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <param name="decimalSeparator"></param>
 <returns>A memory stream containing all texts as bytes in Unicode format</returns>
</member>
<member name="M:CompuMaster.Data.CsvTools.WriteDataTableToCsvMemoryStream(System.Data.DataTable,System.Boolean,System.Text.Encoding,System.Globalization.CultureInfo,System.String,System.Char)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="cultureFormatProvider">A globalization information object for the conversion of all data to strings</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <returns>A memory stream containing all texts as bytes in Unicode format</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.CsvTools.WriteDataTableToCsvMemoryStream(System.Data.DataTable,System.Boolean,System.Text.Encoding,System.Globalization.CultureInfo,System.String,System.Char,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Create a CSV table
 </summary>
 <param name="dataTable"></param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="cultureFormatProvider">A globalization information object for the conversion of all data to strings</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
 <returns>A memory stream containing all texts as bytes in Unicode format</returns>
</member>
<member name="M:CompuMaster.Data.CsvTools.CsvEncode(System.String,System.Char,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Encode a string into CSV encoding
 </summary>
 <param name="value">The unencoded text</param>
 <param name="recognizeTextBy">The character to identify a string in the CSV file</param>
 <returns>The encoded writing style of the given text</returns>
</member>
<member name="M:CompuMaster.Data.CsvTools.WriteDataViewToCsvFile(System.String,System.Data.DataView,System.Boolean,System.String,System.String,System.Char,System.Char,CompuMaster.Data.Csv.WriteLineEncodings)">
 <summary>
     Write to a CSV file
 </summary>
 <param name="path">The path of the file</param>
 <param name="dataView">A dataview object with the desired rows</param>
 <param name="includesColumnHeaders">Indicates wether column headers are present</param>
 <param name="encoding">The text encoding of the file</param>
 <param name="columnSeparator">Choose the required character for splitting the columns. Set to null (Nothing in VisualBasic) to enable fixed column widths mode</param>
 <param name="recognizeTextBy">A character indicating the start and end of text strings</param>
</member>
<member name="M:CompuMaster.Data.DatabaseManagement.CreateDatabaseFile(System.String)">
 <summary>
 Create a database file on the specified location, supported file types are .mdb, .accdb, .xls, .xlsx, .xlsm, .xlsb
 </summary>
 <param name="path">The path of the new database file</param>
 <remarks>The folder for the file should already exist and be writable. The file format of the database will be the latest known file type version which is recognized with the file extension.</remarks>
</member>
<member name="M:CompuMaster.Data.DatabaseManagement.CreateDatabaseFile(System.String,CompuMaster.Data.DatabaseManagement.DatabaseFileType)">
 <summary>
 Create a database file on the specified location, supported file types are .mdb, .accdb
 </summary>
 <param name="path">The path of the new database file</param>
 <remarks>The folder for the file should already exist and be writable. </remarks>
</member>
<member name="M:CompuMaster.Data.DatabaseManagement.CreateMsExcelFile(System.String,CompuMaster.Data.DatabaseManagement.MsExcelFileType)">
 <summary>
 Create a database file on the specified location, supported file types are .mdb, .accdb
 </summary>
 <param name="path">The path of the new database file</param>
 <remarks>The folder for the file should already exist and be writable. </remarks>
</member>
<member name="M:CompuMaster.Data.DatabaseManagement.WriteAllBytes(System.String,System.Byte[])">
 <summary>
 Write all bytes to a binary file
 </summary>
 <param name="path">The file path for the output</param>
 <param name="bytes">File output data</param>
 <remarks>An existing file will be overwritten</remarks>
</member>
<member name="M:CompuMaster.Data.DatabaseManagement.LoadBinaryResource(System.String)">
 <summary>
 Read an embedded, binary resource file
 </summary>
 <param name="embeddedFileName">The name of the resouces</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.DataTables">
 <summary>
     Common DataTable operations
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.RemoveRowsWithWithoutRequiredValuesInColumn(System.Data.DataColumn,System.Object[])">
 <summary>
 Remove rows from a table which don't match with a given range of values in a defined column
 </summary>
 <param name="column">The column whose values shall be verified</param>
 <param name="values">The values which are required to keep a row; all rows without a matching value will be removed</param>
 <remarks>Please note: String comparison is case-sensitive</remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.RemoveRowsWithColumnValues(System.Data.DataColumn,System.Object[])">
 <summary>
 Remove rows from a table with a given range of values in a defined column
 </summary>
 <param name="column">The column whose values shall be verified</param>
 <param name="values">The values which lead to a removal of a row</param>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertColumnType(System.Data.DataColumn,System.Type,CompuMaster.Data.DataTables.TypeConverter)">
 <summary>
 Convert a column into another data type by using an own function (a delegate function) for converting the values
 </summary>
 <param name="column"></param>
 <param name="newDataType"></param>
 <param name="delegateForConversion"></param>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.DataTables.TypeConverter">
 <summary>
 A delegate function for converting values from one type into another type
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.KeepColumnsAndRemoveAllOthers(System.Data.DataTable,System.String[])">
 <summary>
     Drop all columns except the required ones
 </summary>
 <param name="table">A data table containing some columns</param>
 <param name="remainingColumns">A list of column names which shall not be removed</param>
 <remarks>
     If the list of the remaining columns contains some column names which are not existing, then those column names will be ignored. There will be no exception in this case.
     The names of the columns are handled case-insensitive.
 </remarks>
</member>
<member name="T:CompuMaster.Data.DataTables.WinFormsListControlItem">
 <summary>
 A list item which can be consumed by list controls in namespaces System.Windows
 </summary>
</member>
<member name="M:CompuMaster.Data.DataTables.RowIndex(System.Data.DataRow)">
 <summary>
     Lookup the row index for a data row in a data table
 </summary>
 <param name="dataRow">The data row whose index number is required</param>
 <returns>An index number for the given data row</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ColumnIndex(System.Data.DataColumn)">
 <summary>
     Lookup the column index for a data column in a data table
 </summary>
 <param name="column">The data column whose index number is required</param>
 <returns>An index number for the given column</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindDuplicates(System.Data.DataColumn)">
 <summary>
     Find duplicate values in a given row and calculate the number of occurances of each value in the table
 </summary>
 <param name="column">A column of a datatable</param>
 <returns>A hashtable containing the origin column value as key and the number of occurances as value</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindDuplicates(System.Data.DataColumn,System.Int32)">
 <summary>
     Find duplicate values in a given row and calculate the number of occurances of each value in the table
 </summary>
 <param name="column">A column of a datatable</param>
 <param name="minOccurances">Only values with occurances equal or more than this number will be returned</param>
 <returns>A hashtable containing the origin column value as key and the number of occurances as value</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.RemoveDuplicates(System.Data.DataTable,System.String)">
 <summary>
 Remove rows with duplicate values in a given column
 </summary>
 <param name="dataTable">A datatable with duplicate values</param>
 <param name="columnName">column name of the datatable which contains the duplicate values</param>
 <returns>A datatable with unique records in the specified column</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToWinFormsListControlItem(System.Data.DataTable)">
 <summary>
     Convert the first two columns into objects which can be consumed by the ListControl objects in the System.Windows.Forms namespaces
 </summary>
 <param name="datatable">The datatable which contains a key column and a value column for the list control</param>
 <returns>An array of WinFormsListControlItem</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToWebFormsListItem(System.Data.DataTable)">
 <summary>
     Convert the first two columns into objects which can be consumed by the ListControl objects in the System.Web.WebControls namespaces
 </summary>
 <param name="datatable">The datatable which contains a key column and a value column for the list control</param>
 <returns>An array of System.Web.UI.WebControls.ListItem for consumption in many list controls of the System.Web namespace</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDatasetToXml(System.Data.DataSet)">
 <summary>
     Convert a dataset to an xml string with data and schema information
 </summary>
 <param name="dataset"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertXmlToDataset(System.String)">
 <summary>
     Convert an xml string to a dataset
 </summary>
 <param name="xml"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.CopyDataTableWithSubsetOfRows(System.Data.DataTable,System.Int32)">
 <summary>
     Create a new data table clone with only some first rows
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="NumberOfRows">The number of rows to be copied</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.CopyDataTableWithSubsetOfRows(System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
     Create a new data table clone with only some first rows
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="StartAtRow">The position where to start the copy process, the first row is at 0</param>
 <param name="NumberOfRows">The number of rows to be copied</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.RemoveRowsWithNoCorrespondingValueInComparisonTable(System.Data.DataColumn,System.Data.DataColumn)">
 <summary>
     Remove those rows in the source column which haven't got the same value in the compare table
 </summary>
 <param name="sourceColumn">This is the column of the master table where all operations shall be executed</param>
 <param name="valuesMustExistInThisColumnToKeepTheSourceRow">This is the comparison value against the source table's column</param>
 <returns>An arraylist of removed keys</returns>
 <remarks>
     Strings will be compared case-insensitive, DBNull values in the source table will always be removed
     Attention: result of this function is not an arraylist containing keys!
                result of this funciton is an arraylist containing object arrays of keys of removed rows!
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.RemoveRowsWithNoCorrespondingValueInComparisonTable(System.Data.DataColumn,System.Data.DataColumn,System.Boolean,System.Boolean)">
 <summary>
     Remove those rows in the source column which haven't got the same value in the compare table
 </summary>
 <param name="sourceColumn">This is the column of the master table where all operations shall be executed</param>
 <param name="valuesMustExistInThisColumnToKeepTheSourceRow">This is the comparison value against the source table's column</param>
 <param name="ignoreCaseInStrings">Strings will be compared case-insensitive</param>
 <param name="alwaysRemoveDBNullValues">Always remove the source row when it contains a DBNull value</param>
 <returns>An arraylist of removed keys</returns>
 <remarks>
     Attention: result of this function is not an arraylist containing keys!
                result of this funciton is an arraylist containing object arrays of keys of removed rows!
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.RemoveRowsWithCorrespondingValueInComparisonTable(System.Data.DataColumn,System.Data.DataColumn)">
 <summary>
     Remove those rows in the source column which haven't got the same value in the compare table
 </summary>
 <param name="sourceColumn">This is the column of the master table where all operations shall be executed</param>
 <param name="valuesMustExistInThisColumnToKeepTheSourceRow">This is the comparison value against the source table's column</param>
 <returns>An arraylist of removed keys</returns>
 <remarks>
     Strings will be compared case-insensitive, DBNull values in the source table will always be removed
     Attention: result of this function is not an arraylist containing keys!
                result of this funciton is an arraylist containing object arrays of keys of removed rows!
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.RemoveRowsWithCorrespondingValueInComparisonTable(System.Data.DataColumn,System.Data.DataColumn,System.Boolean,System.Boolean)">
 <summary>
     Remove those rows in the source column which have got the same value in the compare table
 </summary>
 <param name="sourceColumn">This is the column of the master table where all operations shall be executed</param>
 <param name="valuesMustExistInThisColumnToKeepTheSourceRow">This is the comparison value against the source table's column</param>
 <param name="ignoreCaseInStrings">Strings will be compared case-insensitive</param>
 <param name="alwaysRemoveDBNullValues">Always remove the source row when it contains a DBNull value</param>
 <returns>An arraylist of removed keys</returns>
 <remarks>
     Attention: result of this function is not an arraylist containing keys!
                result of this funciton is an arraylist containing object arrays of keys of removed rows!
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataRowClone(System.Data.DataRow)">
 <summary>
     Creates a complete clone of a DataRow with structure as well as data
 </summary>
 <param name="sourceRow">The source row to be copied</param>
 <returns>The new clone of the DataRow</returns>
 <remarks>
     The resulting DataRow has got the schema from the sourceRow's DataTable.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataTableClone(System.Data.DataTable)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataTableClone(System.Data.DataTable,System.String)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="sourceRowFilter">An additional row filter for the source table, for all rows set it to null (Nothing in VisualBasic)</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataTableClone(System.Data.DataTable,System.String,System.String)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="sourceRowFilter">An additional row filter for the source table, for all rows set it to null (Nothing in VisualBasic)</param>
 <param name="sourceSortExpression">An additional sort command for the source table</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataTableClone(System.Data.DataTable,System.String,System.String,System.Int32)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="sourceRowFilter">An additional row filter for the source table, for all rows set it to null (Nothing in VisualBasic)</param>
 <param name="sourceSortExpression">An additional sort command for the source table</param>
 <param name="topRows">How many rows from top shall be returned as maximum?</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataTableClone(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.Int32,System.Boolean)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="sourceTable">The source table to be copied</param>
 <param name="destinationTable">The destination of all operations; the destination table will be a clone of the source table at the end</param>
 <param name="sourceRowFilter">An additional row filter for the source table. For all rows set it to null (Nothing in VisualBasic)</param>
 <param name="sourceSortExpression">An additional sort command for the source table</param>
 <param name="topRows">How many rows from top shall be returned as maximum?</param>
 <param name="overwritePropertiesOfExistingColumns">Shall the data type or any other settings of an existing table be modified to match the source column's definition?</param>
 <remarks>
     All rows of the destination table will be removed, first.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataTableClone(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="sourceTable">The source table to be copied</param>
 <param name="destinationTable">The destination of all operations; the destination table will be a clone of the source table at the end</param>
 <param name="sourceRowFilter">An additional row filter for the source table. For all rows set it to null (Nothing in VisualBasic)</param>
 <param name="sourceSortExpression">An additional sort command for the source table</param>
 <param name="topRows">How many rows from top shall be returned as maximum?</param>
 <param name="overwritePropertiesOfExistingColumns">Shall the data type or any other settings of an existing table be modified to match the source column's definition?</param>
 <param name="dropExistingRowsInDestinationTable">Remove the existing rows of the destination table, first</param>
 <param name="removeUnusedColumnsFromDestinationTable">Remove the existing columns of the destination table which are not present in the source table</param>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataTableClone(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="sourceTable">The source table to be copied</param>
 <param name="destinationTable">The destination of all operations; the destination table will be a clone of the source table at the end</param>
 <param name="sourceRowFilter">An additional row filter for the source table. For all rows set it to null (Nothing in VisualBasic)</param>
 <param name="sourceSortExpression">An additional sort command for the source table</param>
 <param name="topRows">How many rows from top shall be returned as maximum?</param>
 <param name="overwritePropertiesOfExistingColumns">Shall the data type or any other settings of an existing table be modified to match the source column's definition?</param>
 <param name="dropExistingRowsInDestinationTable">Remove the existing rows of the destination table, first</param>
 <param name="removeUnusedColumnsFromDestinationTable">Remove the existing columns of the destination table which are not present in the source table</param>
 <param name="dontExtendSchemaOfDestinatonTable">If true: do not add columns from the source table not existing in the destination table.</param>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataTableClone(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="sourceTable">The source table to be copied</param>
 <param name="destinationTable">The destination of all operations; the destination table will be a clone of the source table at the end</param>
 <param name="sourceRowFilter">An additional row filter for the source table. For all rows set it to null (Nothing in VisualBasic)</param>
 <param name="sourceSortExpression">An additional sort command for the source table</param>
 <param name="topRows">How many rows from top shall be returned as maximum?</param>
 <param name="overwritePropertiesOfExistingColumns">Shall the data type or any other settings of an existing table be modified to match the source column's definition?</param>
 <param name="dropExistingRowsInDestinationTable">Remove the existing rows of the destination table, first</param>
 <param name="removeUnusedColumnsFromDestinationTable">Remove the existing columns of the destination table which are not present in the source table</param>
 <param name="dontExtendSchemaOfDestinatonTable">If true: don't add columns from the source table not existing in the destination table.</param>
 <param name="caseInsensitiveColumnNames">Specifies whether case insensitivity should matter for column names</param>
</member>
<member name="F:CompuMaster.Data.DataTables.RequestedSchemaChangesForUnusedColumns.Remove">
 <summary>
 Remove columns from the destination table not existing in the source table
 </summary>
 <remarks></remarks>
</member>
<member name="F:CompuMaster.Data.DataTables.RequestedSchemaChangesForExistingColumns.Update">
 <summary>
 Column properties like datatype will be changed to match with the source column properties (Attention: data conversion might throw conversion exceptions!)
 </summary>
 <remarks></remarks>
</member>
<member name="F:CompuMaster.Data.DataTables.RequestedSchemaChangesForAdditionalColumns.Add">
 <summary>
 Add missing columns in the destination table which exist in the source table
 </summary>
 <remarks></remarks>
</member>
<member name="F:CompuMaster.Data.DataTables.RequestedRowChanges.KeepExistingRowsInDestinationTableAndInsertNewRows">
 <summary>
 All rows of the destination table will be kept, rows from the source table will be added
 </summary>
 <remarks></remarks>
</member>
<member name="F:CompuMaster.Data.DataTables.RequestedRowChanges.DropExistingRowsInDestinationTableAndInsertNewRows">
 <summary>
 All rows of the destination table will be removed, rows from the source table will be added
 </summary>
 <remarks>This behaviour can be considered as a &quot;replacing&quot; method.</remarks>
</member>
<member name="F:CompuMaster.Data.DataTables.RequestedRowChanges.KeepExistingRowsInDestinationTableAndAddRemoveUpdateChangedRows">
 <summary>
 Update, delete and insert rows to match the source table's row collection. In other words: perform a merge.
 </summary>
 <remarks>After merging, the destination table will have an exact copy of the row collection of the source table. Please note: this value doesn't affect the column collection. Changes in the destination table done before merging won't be preserved</remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.CreateDataTableClone(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.Int32,CompuMaster.Data.DataTables.RequestedRowChanges,System.Boolean,CompuMaster.Data.DataTables.RequestedSchemaChangesForUnusedColumns,CompuMaster.Data.DataTables.RequestedSchemaChangesForExistingColumns,CompuMaster.Data.DataTables.RequestedSchemaChangesForAdditionalColumns)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="sourceTable">The source table to be copied</param>
 <param name="destinationTable">The destination of all operations; the destination table will be a clone of the source table at the end</param>
 <param name="sourceRowFilter">An additional row filter for the source table. For all rows set it to null (Nothing in VisualBasic)</param>
 <param name="sourceSortExpression">An additional sort command for the source table</param>
 <param name="topRows">How many rows from top shall be returned as maximum?</param>
 <param name="rowChanges">Enum specifing the changes to be performed on the destination row </param>
 <param name="caseInsensitiveColumnNames">Specifies whether case insensitivity should matter for column names</param>
 <param name="destinationSchemaChangesForUnusedColumns">Remove the existing columns of the destination table which are not present in the source table</param>
 <param name="destinationSchemaChangesForExistingColumns">If true: do not add columns from the source table not existing in the destination table.</param>
 <param name="destinationSchemaChangesForAdditionalColumns">Specifies if we should compare columns case insensitive when we check whether all columns exist in the destination table. This parameter has no effect if the previous is true.</param>
</member>
<member name="M:CompuMaster.Data.DataTables.RemoveColumns(System.Data.DataTable,System.String[])">
 <summary>
     Remove the specified columns if they exist
 </summary>
 <param name="datatable">A datatable where the operations shall be made</param>
 <param name="columnNames">The names of the columns which shall be removed</param>
 <remarks>
     The columns will only be removed if they exist. If a column name doesn't exist, it will be ignored.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataViewToDataTable(System.Data.DataView)">
 <summary>
     Creates a clone of a dataview but as a new data table
 </summary>
 <param name="data">The data view to create the data table from</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertColumnValuesIntoArrayList(System.Data.DataColumn)">
 <summary>
 Copy the values of a data column into an arraylist
 </summary>
 <param name="column">The column which contains the data</param>
 <returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToArrayList(System.Data.DataColumn)">
 <summary>
     Convert a data table to an arraylist
 </summary>
 <param name="column">The column which shall be used to fill the arraylist</param>
 <returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToArrayList(System.Data.DataTable)">
 <summary>
     Convert a data table to an arraylist
 </summary>
 <param name="data">The first column of this data table will be used</param>
 <returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToArrayList(System.Data.DataTable,System.Int32)">
 <summary>
     Convert a data table to an arraylist
 </summary>
 <param name="data">The data table with the content</param>
 <param name="selectedColumnIndex">The column which shall be used to fill the arraylist</param>
 <returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertColumnValuesIntoList``1(System.Data.DataColumn)">
 <summary>
 Copy the values of a data column into an arraylist
 </summary>
 <param name="column">The column which contains the data</param>
 <returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToList``1(System.Data.DataColumn)">
 <summary>
     Convert a data table column to a generic list (except DBNull values)
 </summary>
 <param name="column">The column which shall be used to fill the arraylist</param>
 <returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToList``1(System.Data.DataTable)">
 <summary>
     Convert a data table column to a generic list (except DBNull values)
 </summary>
 <param name="data">The first column of this data table will be used</param>
 <returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToList``1(System.Data.DataTable,System.Int32)">
 <summary>
     Convert a data table column to a generic list (except DBNull values)
 </summary>
 <param name="data">The data table with the content</param>
 <param name="selectedColumnIndex">The column which shall be used to fill the arraylist</param>
 <returns>An array containing data with type of the column's datatype OR with type of DBNull</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToHashtable(System.Data.DataColumn,System.Data.DataColumn)">
 <summary>
     Convert a data table to a hash table
 </summary>
 <param name="keyColumn">This is the key column from the data table and MUST BE UNIQUE</param>
 <param name="valueColumn">A column which contains the values</param>
 <returns></returns>
 <remarks>
 ATTENTION: the very first column is used as key column and must be unique therefore
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToHashtable(System.Data.DataTable)">
 <summary>
     Convert a data table to a hash table
 </summary>
 <param name="data">The first two columns of this data table will be used</param>
 <returns></returns>
 <remarks>
     ATTENTION: the very first column is used as key column and must be unique therefore
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToHashtable(System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
     Convert a data table to a hash table
 </summary>
 <param name="data">The data table with the content</param>
 <param name="keyColumnIndex">This is the key column from the data table and MUST BE UNIQUE</param>
 <param name="valueColumnIndex">A column which contains the values</param>
 <returns></returns>
 <remarks>
 ATTENTION: the very first column is used as key column and must be unique therefore
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToDictionaryEntryArray(System.Data.DataTable)">
 <summary>
     Convert a data table to an array of dictionary entries
 </summary>
 <param name="data">The first two columns of this data table will be used</param>
 <returns></returns>
 <remarks>
     The very first column is used as key column, the second one as the value column
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToDictionaryEntryArray(System.Data.DataColumn,System.Data.DataColumn)">
 <summary>
     Convert a data table to an array of dictionary entries
 </summary>
 <param name="keyColumn">This is the key column from the data table</param>
 <param name="valueColumn">A column which contains the values</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataTableToDictionaryEntryArray(System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
     Convert a data table to an array of dictionary entries
 </summary>
 <param name="data">The data table with the content</param>
 <param name="keyColumnIndex">This is the key column from the data table</param>
 <param name="valueColumnIndex">A column which contains the values</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertICollectionToDataTable(System.Collections.ICollection)">
 <summary>
     Convert an ICollection to a datatable
 </summary>
 <param name="collection">An ICollection with some content</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertIDictionaryToDataTable(System.Collections.IDictionary)">
 <summary>
     Convert an IDictionary to a datatable
 </summary>
 <param name="dictionary">An IDictionary with some content</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertIDictionaryToDataTable(System.Collections.IDictionary,System.Boolean)">
 <summary>
     Convert an IDictionary to a datatable
 </summary>
 <param name="dictionary">An IDictionary with some content</param>
 <param name="keyIsUnique">If true, the key column in the data table will be marked as unique</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDictionaryEntryArrayToDataTable(System.Collections.DictionaryEntry[])">
 <summary>
     Convert an array of DictionaryEntry to a datatable
 </summary>
 <param name="dictionaryEntries">An array of DictionaryEntry with some content</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDictionaryEntryArrayToDataTable(System.Collections.DictionaryEntry[],System.Boolean)">
 <summary>
     Convert an array of DictionaryEntry to a datatable
 </summary>
 <param name="dictionaryEntries">An array of DictionaryEntry with some content</param>
 <param name="keyIsUnique">If true, the key column in the data table will be marked as unique</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertNameValueCollectionToDataTable(System.Collections.Specialized.NameValueCollection)">
 <summary>
     Convert a NameValueCollection to a datatable
 </summary>
 <param name="nameValueCollection">An name-value-collection with some content</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertNameValueCollectionToDataTable(System.Collections.Specialized.NameValueCollection,System.Boolean)">
 <summary>
     Convert a NameValueCollection to a datatable
 </summary>
 <param name="nameValueCollection">An name-value-collection with some content</param>
 <param name="keyIsUnique">If true, the key column in the data table will be marked as unique</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.GetDataTableViaODBC(System.String,System.String,System.String)">
 <summary>
     Simplified creation of a DataTable by definition of a SQL statement and a connection string
 </summary>
 <param name="strSQL">The SQL statement to retrieve the data</param>
 <param name="ConnectionString">The connection string to the data source</param>
 <param name="NameOfNewDataTable">The name of the new DataTable</param>
 <returns>A filled DataTable</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.GetDataTableViaSqlClient(System.String,System.String,System.String)">
 <summary>
     Simplified creation of a DataTable by definition of a SQL statement and a connection string
 </summary>
 <param name="strSQL">The SQL statement to retrieve the data</param>
 <param name="ConnectionString">The connection string to the data source</param>
 <param name="NameOfNewDataTable">The name of the new DataTable</param>
 <returns>A filled DataTable</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.LookupUniqueColumnName(System.Data.DataTable,System.String)">
 <summary>
     Lookup a new unique column name for a data table
 </summary>
 <param name="dataTable">The data table which shall get a new data column</param>
 <param name="suggestedColumnName">A column name suggestion</param>
 <returns>The suggested column name as it is or modified column name to be unique</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.LookupUnqiueColumnName(System.Data.DataTable,System.String)">
 <summary>
     Lookup a new unique column name for a data table
 </summary>
 <param name="dataTable">The data table which shall get a new data column</param>
 <param name="suggestedColumnName">A column name suggestion</param>
 <returns>The suggested column name as it is or modified column name to be unique</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToHtmlTable(System.Data.DataTable)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToHtmlTable(System.Data.DataRowCollection,System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToHtmlTable(System.Data.DataRow[],System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToHtmlTable(System.Data.DataTable,System.String,System.String,System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <param name="titleTagOpener">The opening tag in front of the table's title</param>
 <param name="titleTagEnd">The closing tag after the table title</param>
 <param name="additionalTableAttributes">Additional attributes for the rendered table</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToHtmlTable(System.Data.DataTable,System.String,System.String,System.String,System.Boolean)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <param name="titleTagOpener">The opening tag in front of the table's title</param>
 <param name="titleTagEnd">The closing tag after the table title</param>
 <param name="additionalTableAttributes">Additional attributes for the rendered table</param>
 <param name="htmlEncodeCellContentAndLineBreaks">Encode all output to valid HTML</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToHtmlTable(System.Data.DataRowCollection,System.String,System.String,System.String,System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="titleTagOpener">The opening tag in front of the table's title</param>
 <param name="titleTagEnd">The closing tag after the table title</param>
 <param name="additionalTableAttributes">Additional attributes for the rendered table</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToHtmlTable(System.Data.DataRow[],System.String,System.String,System.String,System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="titleTagOpener">The opening tag in front of the table's title</param>
 <param name="titleTagEnd">The closing tag after the table title</param>
 <param name="additionalTableAttributes">Additional attributes for the rendered table</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTable(System.Data.DataTable)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTable(System.Data.DataTable,System.Int32[])">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <param name="fixedColumnWidths">The column sizes in chars</param>
 <returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataRow[])">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataRows">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataRow[],CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataRows">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataRow)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataRow">The data row to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataRow,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataRow">The data row to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,System.Int32[])">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,System.Int32)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,System.Int32,System.Int32,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,System.String,System.String,System.String,System.Char,System.Char)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,System.Int32[],System.String,System.String,System.String,System.Char,System.Char)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,System.Int32,System.String,System.String,System.String,System.Char,System.Char)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,System.Int32,System.Int32,System.String,System.String,System.String,System.Char,System.Char)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTableFixedColumnWidths(System.Data.DataTable,System.Int32,System.Int32,System.String,System.String,System.String,System.Char,System.Char,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are separated by fixed width. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToWikiTable(System.Data.DataRowCollection)">
 <summary>
 Create a well-formed table for Wiki
 </summary>
 <param name="rows"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToWikiTable(System.Data.DataRowCollection,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
 Create a well-formed table for Wiki
 </summary>
 <param name="rows"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToWikiTable(System.Data.DataTable)">
 <summary>
 Create a well-formed table for Wiki
 </summary>
 <param name="table"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToWikiTable(System.Data.DataTable,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
 Create a well-formed table for Wiki
 </summary>
 <param name="table"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SuggestColumnWidthsForFixedPlainTables(System.Data.DataTable)">
 <summary>
 Suggests column widths for a table using as minimum 2 chars, but minimum header string length, but also either full cell length for number/date/time columns or for all other types 80 % of all values should be visible completely
 </summary>
 <param name="table"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SuggestColumnWidthsForFixedPlainTables(System.Data.DataRowCollection)">
 <summary>
 Suggests column widths for a table using as minimum 2 chars, but minimum header string length, but also either full cell length for number/date/time columns or for all other types 80 % of all values should be visible completely
 </summary>
 <param name="rows"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SuggestColumnWidthsForFixedPlainTables(System.Data.DataRow[])">
 <summary>
 Suggests column widths for a table using as minimum 2 chars, but minimum header string length, but also either full cell length for number/date/time columns or for all other types 80 % of all values should be visible completely
 </summary>
 <param name="rows"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SuggestColumnWidthsForFixedPlainTables(System.Data.DataTable,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
 Suggests column widths for a table using as minimum 2 chars, but minimum header string length, but also either full cell length for number/date/time columns or for all other types 80 % of all values should be visible completely
 </summary>
 <param name="table"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SuggestColumnWidthsForFixedPlainTables(System.Data.DataRowCollection,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
 Suggests column widths for a table using as minimum 2 chars, but minimum header string length, but also either full cell length for number/date/time columns or for all other types 80 % of all values should be visible completely
 </summary>
 <param name="rows"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SuggestColumnWidthsForFixedPlainTables(System.Data.DataRow[],CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
 Suggests column widths for a table using as minimum 2 chars, but minimum header string length, but also either full cell length for number/date/time columns or for all other types 80 % of all values should be visible completely
 </summary>
 <param name="rows"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SuggestColumnWidthsForFixedPlainTables(System.Data.DataRow[],System.Data.DataTable,System.Double,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
 Suggests column widths for a table using as minimum 2 chars, but minimum header string length, but also either full cell length for number/date/time columns or for all other types 80 % of all values should be visible completely
 </summary>
 <param name="rows"></param>
 <param name="table"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SuggestColumnWidthsForFixedPlainTables(System.Data.DataRowCollection,System.Data.DataTable,System.Double,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
 Suggests column widths for a table using as minimum 2 chars, but minimum header string length, but also either full cell length for number/date/time columns or for all other types 80 % of all values should be visible completely
 </summary>
 <param name="rows"></param>
 <param name="table"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables._ConvertToPlainTextTableWithFixedColumnWidths(System.Data.DataRow[],System.String,System.Int32[],CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="fixedColumnWidths">The column sizes in chars</param>
 <returns>All rows are with fixed column withs. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables._ConvertToPlainTextTableWithFixedColumnWidths(System.Data.DataRowCollection,System.String,System.Int32[],CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="fixedColumnWidths">The column sizes in chars</param>
 <returns>All rows are with fixed column withs. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables._ConvertToPlainTextTableWithFixedColumnWidths(System.Data.DataRow[],System.String,System.Int32[],System.String,System.String,System.String,System.Char,System.Char,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="fixedColumnWidths">The column sizes in chars</param>
 <param name="verticalSeparatorHeader"></param>
 <param name="verticalSeparatorCells"></param>
 <param name="crossSeparator"></param>
 <param name="horizontalSeparatorHeadline"></param>
 <param name="horizontalSeparatorCells"></param>
 <returns>All rows are with fixed column withs. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables._ConvertToPlainTextTableWithFixedColumnWidths(System.Data.DataRowCollection,System.String,System.Int32[],System.String,System.String,System.String,System.Char,System.Char,CompuMaster.Data.DataTables.DataColumnToString)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="fixedColumnWidths">The column sizes in chars</param>
 <param name="verticalSeparatorHeader"></param>
 <param name="verticalSeparatorCells"></param>
 <param name="crossSeparator"></param>
 <param name="horizontalSeparatorHeadline"></param>
 <param name="horizontalSeparatorCells"></param>
 <returns>All rows are with fixed column withs. If no rows have been processed, the user will get notified about this fact</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.TrimStringToFixedWidth(System.String,System.Int32)">
 <summary>
 Trim the string to a fixed width and concat a string which is too long with triple-dot at the end
 </summary>
 <param name="value"></param>
 <param name="width"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.MaxValueOfFirstXPercent(System.Int32[],System.Double)">
 <summary>
 Lookup a value which is at 80 % position
 </summary>
 <param name="values"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTable(System.Data.DataRow[],System.String)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTable(System.Data.DataRowCollection,System.String)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTable(System.Data.DataRowCollection,System.String,System.Int32[])">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="fixedColumnWidths">The column sizes in chars</param>
 <returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertToPlainTextTable(System.Data.DataRow,System.String)">
 <summary>
     Return a string with all columns for the specified row in vertical arrangement, helpfull for debugging purposes
 </summary>
 <param name="row">The row to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>All columns captions/names are separated from their values by a &quot;: &quot;. All columns are arranged vertically.</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataReaderToDataSet(System.Data.IDataReader)">
 <summary>
     Convert any opened datareader into a dataset
 </summary>
 <param name="dataReader">An already opened dataReader</param>
 <returns>A dataset containing all datatables the dataReader was able to read</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataReaderToDataTable(System.Data.IDataReader)">
 <summary>
     Convert any opened datareader into a data table
 </summary>
 <param name="dataReader">An already opened dataReader</param>
 <returns>A data table containing all data the dataReader was able to read</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ConvertDataReaderToDataTable(System.Data.IDataReader,System.String)">
 <summary>
     Convert any opened datareader into a data table
 </summary>
 <param name="dataReader">An already opened dataReader</param>
 <param name="tableName">The name for the new table</param>
 <returns>A data table containing all data the dataReader was able to read</returns>
</member>
<member name="T:CompuMaster.Data.DataTables.JoinTypes">
 <summary>
     Table join types
 </summary>
</member>
<member name="M:CompuMaster.Data.DataTables.JoinTables(System.Data.DataTable,System.Data.DataTable,CompuMaster.Data.DataTables.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset based on the first relation found
 </summary>
 <param name="leftParentTable"></param>
 <param name="rightChildTable"></param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.JoinTables(System.Data.DataTable,System.Data.DataTable,System.Data.DataRelation,CompuMaster.Data.DataTables.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
 <param name="leftParentTable">The left or parent table</param>
 <param name="rightChildTable">The right or child table</param>
 <param name="relation">A data table relation which shall be used for the joining</param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
 <remarks>
     The selected columns are: 
     <ul>
         <li>all columns from the left parent table</li>
         <li>INNER JOIN: those columns from the right child table which are not member of the relation in charge</li>
         <li>LEFT JOIN: all columns from the right child table</li>
     </ul>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.JoinTables(System.Data.DataTable,System.Data.DataColumn[],System.Data.DataTable,System.Data.DataColumn[],CompuMaster.Data.DataTables.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
 <param name="leftParentTable">The left or parent table</param>
 <param name="leftTableColumnsToCopy">An array of columns to copy from the left table</param>
 <param name="rightChildTable">The right or child table</param>
 <param name="rightTableColumnsToCopy">An array of columns to copy from the right table</param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.JoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[],CompuMaster.Data.DataTables.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
 <param name="leftParentTable">The left or parent table</param>
 <param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table</param>
 <param name="rightChildTable">The right or child table</param>
 <param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table</param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.JoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[],System.Data.DataRelation,CompuMaster.Data.DataTables.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
 <param name="leftParentTable">The left or parent table</param>
 <param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table</param>
 <param name="rightChildTable">The right or child table</param>
 <param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table</param>
 <param name="relation">A data table relation which shall be used for the joining</param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.CrossJoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[])">
 <summary>
     Cross join of two tables
 </summary>
 <param name="leftTable">A first datatable</param>
 <param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table</param>
 <param name="rightTable">A second datatable</param>
 <param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FullJoinTables(System.Data.DataTable,System.Data.DataTable)">
 <summary>
 Create a new table using a full outer join
 </summary>
 <param name="leftTable">1st table</param>
 <param name="rightTable">2nd table</param>
 <returns></returns>
 <remarks>The primary key columns of both tables are used to find the corrorresponding matches</remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.FullJoinTables(System.Data.DataTable,System.String[],System.Data.DataTable,System.String[])">
 <summary>
 Create a new table using a full outer join
 </summary>
 <param name="leftTable">1st table</param>
 <param name="leftKeyColumns">The key columns which shall be used for finding matches in the 2nd table</param>
 <param name="rightTable">2nd table</param>
 <param name="rightKeyColumns">The key columns which shall be used for finding matches in the 1st table</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.FullJoinTables(System.Data.DataTable,System.Data.DataColumn[],System.Data.DataTable,System.Data.DataColumn[])">
 <summary>
 Create a new table using a full outer join
 </summary>
 <param name="leftTable">1st table</param>
 <param name="leftKeyColumns">The key columns which shall be used for finding matches in the 2nd table</param>
 <param name="rightTable">2nd table</param>
 <param name="rightKeyColumns">The key columns which shall be used for finding matches in the 1st table</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.FullJoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[])">
 <summary>
 Create a new table using a full outer join and case-insensitive string-comparison mode
 </summary>
 <param name="leftTable">1st table</param>
 <param name="leftKeyColumnIndexes">The key columns which shall be used for finding matches in the 2nd table</param>
 <param name="rightTable">2nd table</param>
 <param name="rightKeyColumnIndexes">The key columns which shall be used for finding matches in the 1st table</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.FullJoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[],System.Boolean)">
 <summary>
 Create a new table using a full outer join
 </summary>
 <param name="leftTable">1st table</param>
 <param name="leftKeyColumnIndexes">The key columns which shall be used for finding matches in the 2nd table</param>
 <param name="rightTable">2nd table</param>
 <param name="rightKeyColumnIndexes">The key columns which shall be used for finding matches in the 1st table</param>
 <param name="compareStringsCaseInsensitive">True to compare strings case insensitive, False for case sensitive</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.CopyColumnScheme(System.Data.DataTable,System.Data.DataTable,System.Boolean)">
 <summary>
 Copy the column collection from a template table to a destination table
 </summary>
 <param name="templateTable"></param>
 <param name="destinationTable"></param>
 <remarks>The data scheme is copied, but contraints are removed</remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.CloneDataColumn(System.Data.DataColumn)">
 <summary>
 Create a clone of a DataColumn except identities, mappings and constraints
 </summary>
 <param name="templateColumn"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.StringNotNothingOrEmpty(System.String)">
 <summary>
 Ensure the string is a valid value (never a null (Nothing in VisualBasic))
 </summary>
 <param name="value"></param>
 <returns>String.Empty for values which are null (Nothing in VisualBasic) or otherwise the value as it is</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.CompareValuesOfUnknownType(System.Object,System.Object,System.Boolean)">
 <summary>
 Compare 2 values of unknown but same type
 </summary>
 <param name="value1">1st value</param>
 <param name="value2">2nd value</param>
 <param name="compareStringsCaseInsensitive">True to compare strings case insensitive, False for case sensitive</param>
 <returns></returns>
 <remarks>Comparisons with DBNull.Value will return False or True, never DBNull.Value</remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.FindUniqueValues(System.Data.DataColumn)">
 <summary>
 Find unique values in a column
 </summary>
 <param name="column">The DataColumn which holds the data</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindUniqueValues(System.Data.DataColumn,System.Boolean)">
 <summary>
 Returns unique values in a column
 </summary>
 <param name="column">The DataColumn which holds the data</param>
 <param name="ignoreDBNull">True never results a DBNull value</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.AddPrefixesToColumnNames(System.Data.DataTable,System.Int32[],System.String)">
 <summary>
     Add a prefix to the names of the columns
 </summary>
 <param name="dataTable"></param>
 <param name="columnIndexes"></param>
 <param name="prefix">e. g. "orders."</param>
</member>
<member name="M:CompuMaster.Data.DataTables.AddSuffixesToColumnNames(System.Data.DataTable,System.Int32[],System.String)">
 <summary>
     Add a suffix to the names of the columns
 </summary>
 <param name="dataTable"></param>
 <param name="columnIndexes"></param>
 <param name="suffix">e. g. "-orders"</param>
</member>
<member name="T:CompuMaster.Data.DataTables.ReArrangeDataColumnsException">
 <summary>
     An exception which gets thrown when converting data in the ReArrangeDataColumns methods
 </summary>
</member>
<member name="M:CompuMaster.Data.DataTables.ReArrangeDataColumns(System.Data.DataTable,System.String[])">
 <summary>
     Rearrange columns
 </summary>
 <param name="source">The source table with data</param>
 <param name="columnsToCopy">An array of column names which shall be copied in the specified order from the source table</param>
 <returns>A new and independent data table with copied data</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.ReArrangeDataColumns(System.Data.DataTable,System.Data.DataColumn[])">
 <summary>
     Rearrange columns and also change their data types
 </summary>
 <param name="source">The source table with data</param>
 <param name="destinationColumnSet">An array of columns as they shall be inserted into the result</param>
 <returns>A new and independent data table with copied data</returns>
 <remarks>
     The copy process requires that the names of the destination columns can be found in the columns collection of the source table. 
 </remarks>
 <example>
     <code language="vb">
         ReArrangeDataColumns(source, New System.Data.DataColumn() {New DataColumn("column1Name", GetType(String)), New DataColumn("column2Name", GetType(Integer))})
     </code>
 </example>
</member>
<member name="M:CompuMaster.Data.DataTables.ReArrangeDataColumns(System.Data.DataTable,System.Data.DataColumn[],System.Collections.ArrayList)">
 <summary>
     Rearrange columns and also change their data types
 </summary>
 <param name="source">The source table with data</param>
 <param name="destinationColumnSet">An array of columns as they shall be inserted into the result</param>
 <param name="ignoreConversionExceptionAndLogThemHere">In case of data conversion exceptions, log them here instead of throwing them immediately</param>
 <returns>A new and independent data table with copied data</returns>
 <remarks>
     The copy process requires that the names of the destination columns can be found in the columns collection of the source table. 
 </remarks>
 <example>
     <code language="vb">
         ReArrangeDataColumns(source, New System.Data.DataColumn() {New DataColumn("column1Name", GetType(String)), New DataColumn("column2Name", GetType(Integer))})
     </code>
 </example>
</member>
<member name="M:CompuMaster.Data.DataTables.AllColumns(System.Data.DataTable)">
 <summary>
 All columns of the table
 </summary>
 <param name="table"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.AllColumnNames(System.Data.DataTable)">
 <summary>
 All column names of the table
 </summary>
 <param name="table"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Data.DataTable,CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables using their primary key columns (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="rightTable">The right table</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Data.DataColumn[],System.Data.DataTable,System.Data.DataColumn[],CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="leftTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="rightTable">The right table</param>
 <param name="rightTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Data.DataColumn,System.Data.DataTable,System.Data.DataColumn,CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="leftTableKey">A column to be used as key columns for join (null/Nothing uses PrimaryKeys)</param>
 <param name="rightTable">The right table</param>
 <param name="rightTableKey">A column to be used as key columns for join (null/Nothing uses PrimaryKeys)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn[],System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn[],CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="leftTableKey">A column to be used as key columns for join (null/Nothing uses PrimaryKeys)</param>
 <param name="leftTableColumnsToCopy">An array of columns to copy from the left table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="rightTable">The right table</param>
 <param name="rightTableKey">A column to be used as key columns for join (null/Nothing uses PrimaryKeys)</param>
 <param name="rightTableColumnsToCopy">An array of columns to copy from the right table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Data.DataColumn[],System.Data.DataColumn[],System.Data.DataTable,System.Data.DataColumn[],System.Data.DataColumn[],CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="leftTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="leftTableColumnsToCopy">An array of columns to copy from the left table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="rightTable">The right table</param>
 <param name="rightTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="rightTableColumnsToCopy">An array of columns to copy from the right table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Data.DataColumn[],System.Data.DataColumn[],System.Data.DataTable,System.Data.DataColumn[],System.Data.DataColumn[],CompuMaster.Data.DataTables.SqlJoinTypes,System.Boolean)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="leftTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="leftTableColumnsToCopy">An array of columns to copy from the left table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="rightTable">The right table</param>
 <param name="rightTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="rightTableColumnsToCopy">An array of columns to copy from the right table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.FindRowsInTable(System.Object,System.Data.DataTable)">
 <summary>
 Find rows in a table with the specified values in its key columns
 </summary>
 <param name="searchedValue">A value which must be present in the key column of the table</param>
 <param name="table">The table which is to be filtered</param>
 <returns>All rows which match with the searched values</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindRowsInTable(System.Object[],System.Data.DataTable)">
 <summary>
 Find rows in a table with the specified values in its key columns
 </summary>
 <param name="searchedValueSet">A set of values which must be present in the key columns of the table</param>
 <param name="table">The table which is to be filtered</param>
 <returns>All rows which match with the searched values</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindRowsInTable(System.Object,System.Data.DataTable,System.String)">
 <summary>
 Find rows in a table with the specified values in its key columns
 </summary>
 <param name="searchedValue">A value which must be present in the key column of the table</param>
 <param name="table">The table which is to be filtered</param>
 <param name="keyColumn">The key column of the table</param>
 <returns>All rows which match with the searched values</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindRowsInTable(System.Object[],System.Data.DataTable,System.String[])">
 <summary>
 Find rows in a table with the specified values in its key columns
 </summary>
 <param name="searchedValueSet">A set of values which must be present in the key columns of the table</param>
 <param name="table">The table which is to be filtered</param>
 <param name="keyColumns">The key columns of the table</param>
 <returns>All rows which match with the searched values</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindRowsInTable(System.Object,System.Data.DataTable,System.Int32)">
 <summary>
 Find rows in a table with the specified values in its key columns
 </summary>
 <param name="searchedValue">A value which must be present in the key column of the table</param>
 <param name="table">The table which is to be filtered</param>
 <param name="keyColumnIndex">The key column of the table</param>
 <returns>All rows which match with the searched values</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindRowsInTable(System.Object[],System.Data.DataTable,System.Int32[])">
 <summary>
 Find rows in a table with the specified values in its key columns
 </summary>
 <param name="searchedValueSet">A set of values which must be present in the key columns of the table</param>
 <param name="table">The table which is to be filtered</param>
 <param name="keyColumnIndexes">The key columns of the table</param>
 <returns>All rows which match with the searched values</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindRowsInTable(System.Object,System.Data.DataTable,System.Data.DataColumn)">
 <summary>
 Find rows in a table with the specified values in its key columns
 </summary>
 <param name="searchedValue">A value which must be present in the key column of the table</param>
 <param name="table">The table which is to be filtered</param>
 <param name="keyColumn">The key column of the table</param>
 <returns>All rows which match with the searched values</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindRowsInTable(System.Object[],System.Data.DataTable,System.Data.DataColumn[])">
 <summary>
 Find rows in a table with the specified values in its key columns
 </summary>
 <param name="searchedValueSet">A set of values which must be present in the key columns of the table</param>
 <param name="table">The table which is to be filtered</param>
 <param name="keyColumns">The key columns of the table</param>
 <returns>All rows which match with the searched values</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindRowsInTable(System.Object[],System.Data.DataTable,System.Data.DataColumn[],System.Boolean)">
 <summary>
 Find rows in a table with the specified values in its key columns
 </summary>
 <param name="searchedValueSet">A set of values which must be present in the key columns of the table</param>
 <param name="table">The table which is to be filtered</param>
 <param name="keyColumns">The key columns of the table</param>
 <returns>All rows which match with the searched values</returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.String,System.String)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumn"></param>
 <param name="foreignTableKeyColumn"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.String,System.String,System.Boolean)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumn"></param>
 <param name="foreignTableKeyColumn"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.String[],System.String[])">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumns"></param>
 <param name="foreignTableKeyColumns"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.String[],System.String[],System.Boolean)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumns"></param>
 <param name="foreignTableKeyColumns"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumnIndex"></param>
 <param name="foreignTableKeyColumnIndex"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.Int32,System.Int32,System.Boolean)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumnIndex"></param>
 <param name="foreignTableKeyColumnIndex"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.Int32[],System.Int32[])">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumnIndexes"></param>
 <param name="foreignTableKeyColumnIndexes"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.Int32[],System.Int32[],System.Boolean)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumnIndexes"></param>
 <param name="foreignTableKeyColumnIndexes"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumn"></param>
 <param name="foreignTableKeyColumn"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumn"></param>
 <param name="foreignTableKeyColumn"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.Data.DataColumn[],System.Data.DataColumn[])">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumns"></param>
 <param name="foreignTableKeyColumns"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.FindMatchingRowsInForeignTable(System.Data.DataRow,System.Data.DataTable,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
 <summary>
 Find matching rows in a foreign table with the values in specified columns of a source table row
 </summary>
 <param name="sourceRow"></param>
 <param name="foreignTable"></param>
 <param name="sourceRowKeyColumns"></param>
 <param name="foreignTableKeyColumns"></param>
 <param name="compareStringsCaseInsensitive"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[],CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="indexesOfLeftTableKeys">An array of column indexes to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="rightTable">The right table</param>
 <param name="indexesOfRightTableKeys">An array of column indexes to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Int32,System.Data.DataTable,System.Int32,CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="indexesOfLeftTableKey">A column index to be used as key columns for join</param>
 <param name="rightTable">The right table</param>
 <param name="indexesOfRightTableKey">A column index to be used as key columns for join</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Int32,System.Int32[],System.Data.DataTable,System.Int32,System.Int32[],CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="indexesOfLeftTableKey">A column index to be used as key columns for join</param>
 <param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="rightTable">The right table</param>
 <param name="indexesOfRightTableKey">A column index to be used as key columns for join</param>
 <param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.Int32[],System.Int32[],System.Data.DataTable,System.Int32[],System.Int32[],CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="indexesOfLeftTableKeys">An array of column indexes to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="rightTable">The right table</param>
 <param name="indexesOfRightTableKeys">An array of column indexes to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.String[],System.Data.DataTable,System.String[],CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="leftTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="rightTable">The right table</param>
 <param name="rightTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.String,System.Data.DataTable,System.String,CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="leftTableKey">A column to be used as key column for join</param>
 <param name="rightTable">The right table</param>
 <param name="rightTableKey">A column to be used as key column for join</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.String,System.String[],System.Data.DataTable,System.String,System.String[],CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="leftTableKey">A column to be used as key column for join</param>
 <param name="leftTableColumnsToCopy">An array of columns to copy from the left table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="rightTable">The right table</param>
 <param name="rightTableKey">A column to be used as key column for join</param>
 <param name="rightTableColumnsToCopy">An array of columns to copy from the right table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTables.SqlJoinTables(System.Data.DataTable,System.String[],System.String[],System.Data.DataTable,System.String[],System.String[],CompuMaster.Data.DataTables.SqlJoinTypes)">
 <summary>
     Execute a table join on two tables (independent from their dataset, independent from their registered relations, without requirement for existing parent items (unlike to .NET standard behaviour) more like SQL behaviour)
 </summary>
 <param name="leftTable">The left table</param>
 <param name="leftTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="leftTableColumnsToCopy">An array of columns to copy from the left table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="rightTable">The right table</param>
 <param name="rightTableKeys">An array of columns to be used as key columns for join (null/Nothing/empty array uses PrimaryKeys)</param>
 <param name="rightTableColumnsToCopy">An array of columns to copy from the right table (null/Nothing uses all columns, empty array uses no columns)</param>
 <param name="joinType">Inner, left, right or full join</param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="T:CompuMaster.Data.DataTablesTools">
 <summary>
     Common DataTable operations
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.RemoveDuplicates(System.Data.DataTable,System.String)">
 <summary>
 Remove rows with duplicate values in a given column
 </summary>
 <param name="dataTable">A datatable with duplicate values</param>
 <param name="columnName">Column name of the datatable which contains the duplicate values</param>
 <returns>A datatable with unique records in the specified column</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.KeepColumnsAndRemoveAllOthers(System.Data.DataTable,System.String[])">
 <summary>
     Drop all columns except the required ones
 </summary>
 <param name="table">A data table containing some columns</param>
 <param name="remainingColumns">A list of column names which shall not be removed</param>
 <remarks>
     If the list of the remaining columns contains some column names which are not existing, then those column names will be ignored. There will be no exception in this case.
     The names of the columns are handled case-insensitive.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.RowIndex(System.Data.DataRow)">
 <summary>
     Lookup the row index for a data row in a data table
 </summary>
 <param name="dataRow">The data row whose index number is required</param>
 <returns>An index number for the given data row</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ColumnIndex(System.Data.DataColumn)">
 <summary>
     Lookup the column index for a data column in a data table
 </summary>
 <param name="column">The data column whose index number is required</param>
 <returns>An index number for the given column</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.FindDuplicates(System.Data.DataColumn)">
 <summary>
     Find duplicate values in a given row and calculate the number of occurances of each value in the table
 </summary>
 <param name="column">A column of a datatable</param>
 <returns>A hashtable containing the origin column value as key and the number of occurances as value</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.FindDuplicates(System.Data.DataColumn,System.Int32)">
 <summary>
     Find duplicate values in a given row and calculate the number of occurances of each value in the table
 </summary>
 <param name="column">A column of a datatable</param>
 <param name="minOccurances">Only values with occurances equal or more than this number will be returned</param>
 <returns>A hashtable containing the origin column value as key and the number of occurances as value</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataTableToListControlItem(System.Data.DataTable)">
 <summary>
     Convert the first two columns into objects which can be consumed by the ListControl objects in the System.Windows.Forms or System.Web.WebControl namespaces
 </summary>
 <param name="datatable">The datatable which contains a key column and a value column for the list control</param>
 <returns>An array of ListControlItem</returns>
</member>
<member name="T:CompuMaster.Data.DataTablesTools.ListControlItem">
 <summary>
 A list item which can be consumed by list controls in namespaces System.Windows as well as in System.Web
 </summary>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDatasetToXml(System.Data.DataSet)">
 <summary>
     Convert a dataset to an xml string with data and schema information
 </summary>
 <param name="dataset"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertXmlToDataset(System.String)">
 <summary>
     Convert an xml string to a dataset
 </summary>
 <param name="xml"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.GetDataTableWithSubsetOfRows(System.Data.DataTable,System.Int32)">
 <summary>
     Create a new data table clone with only some first rows
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="NumberOfRows">The number of rows to be copied</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.GetDataTableWithSubsetOfRows(System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
     Create a new data table clone with only some first rows
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="StartAtRow">The position where to start the copy process, the first row is at 0</param>
 <param name="NumberOfRows">The number of rows to be copied</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.CreateDataRowClone(System.Data.DataRow)">
 <summary>
     Creates a complete clone of a DataRow with structure as well as data
 </summary>
 <param name="sourceRow">The source row to be copied</param>
 <returns>The new clone of the DataRow</returns>
 <remarks>
     The resulting DataRow has got the schema from the sourceRow's DataTable, but it hasn't been added to the table yet.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.GetDataTableClone(System.Data.DataTable)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.GetDataTableClone(System.Data.DataTable,System.String)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="RowFilter">An additional row filter, for all rows set it to null (Nothing in VisualBasic)</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.GetDataTableClone(System.Data.DataTable,System.String,System.String)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="RowFilter">An additional row filter, for all rows set it to null (Nothing in VisualBasic)</param>
 <param name="Sort">An additional sort command</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.GetDataTableClone(System.Data.DataTable,System.String,System.String,System.Int32)">
 <summary>
     Creates a complete clone of a DataTable with structure as well as data
 </summary>
 <param name="SourceTable">The source table to be copied</param>
 <param name="RowFilter">An additional row filter, for all rows set it to null (Nothing in VisualBasic)</param>
 <param name="Sort">An additional sort command</param>
 <param name="topRows">How many rows from top shall be returned as maximum?</param>
 <returns>The new clone of the datatable</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataViewToDataTable(System.Data.DataView)">
 <summary>
     Creates a clone of a dataview but as a new data table
 </summary>
 <param name="data">The data view to create the data table from</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertArrayListToDataTable(System.Collections.ArrayList)">
 <summary>
     Convert an ArrayList to a datatable
 </summary>
 <param name="arrayList">An ArrayList with some content</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataTableToHashtable(System.Data.DataColumn,System.Data.DataColumn)">
 <summary>
     Convert a data table to a hash table
 </summary>
 <param name="keyColumn">This is the key column from the data table and MUST BE UNIQUE</param>
 <param name="valueColumn">A column which contains the values</param>
 <returns></returns>
 <remarks>
 ATTENTION: the very first column is used as key column and must be unique therefore
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataTableToHashtable(System.Data.DataTable)">
 <summary>
     Convert a data table to a hash table
 </summary>
 <param name="data">The first two columns of this data table will be used</param>
 <returns></returns>
 <remarks>
     ATTENTION: the very first column is used as key column and must be unique therefore
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataTableToHashtable(System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
     Convert a data table to a hash table
 </summary>
 <param name="data">The data table with the content</param>
 <param name="keyColumnIndex">This is the key column from the data table and MUST BE UNIQUE (make it unique, first!)</param>
 <param name="valueColumnIndex">A column which contains the values</param>
 <returns></returns>
 <remarks>
     ATTENTION: the very first column is used as key column and must be unique therefore
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataTableToDictionaryEntryArray(System.Data.DataTable)">
 <summary>
     Convert a data table to an array of dictionary entries
 </summary>
 <param name="data">The first two columns of this data table will be used</param>
 <returns></returns>
 <remarks>
     The very first column is used as key column, the second one as the value column
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataTableToDictionaryEntryArray(System.Data.DataColumn,System.Data.DataColumn)">
 <summary>
     Convert a data table to an array of dictionary entries
 </summary>
 <param name="keyColumn">This is the key column from the data table</param>
 <param name="valueColumn">A column which contains the values</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataTableToDictionaryEntryArray(System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
     Convert a data table to an array of dictionary entries
 </summary>
 <param name="data">The data table with the content</param>
 <param name="keyColumnIndex">This is the key column from the data table</param>
 <param name="valueColumnIndex">A column which contains the values</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertHashtableToDataTable(System.Collections.Hashtable)">
 <summary>
     Convert a hashtable to a datatable
 </summary>
 <param name="hashtable">A hashtable with some content</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertICollectionToDataTable(System.Collections.ICollection)">
 <summary>
     Convert an ICollection to a datatable
 </summary>
 <param name="collection">An ICollection with some content</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertIDictionaryToDataTable(System.Collections.IDictionary)">
 <summary>
     Convert an IDictionary to a datatable
 </summary>
 <param name="dictionary">An IDictionary with some content</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertIDictionaryToDataTable(System.Collections.IDictionary,System.Boolean)">
 <summary>
     Convert an IDictionary to a datatable
 </summary>
 <param name="dictionary">An IDictionary with some content</param>
 <param name="keyIsUnique">If true, the key column in the data table will be marked as unique</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDictionaryEntryArrayToDataTable(System.Collections.DictionaryEntry[],System.Boolean)">
 <summary>
     Convert an array of DictionaryEntry to a datatable
 </summary>
 <param name="dictionaryEntries">An array of DictionaryEntry with some content</param>
 <param name="keyIsUnique">If true, the key column in the data table will be marked as unique</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertNameValueCollectionToDataTable(System.Collections.Specialized.NameValueCollection)">
 <summary>
     Convert a NameValueCollection to a datatable
 </summary>
 <param name="nameValueCollection">An IDictionary with some content</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertNameValueCollectionToDataTable(System.Collections.Specialized.NameValueCollection,System.Boolean)">
 <summary>
     Convert a NameValueCollection to a datatable
 </summary>
 <param name="nameValueCollection">An IDictionary with some content</param>
 <param name="keyIsUnique">If true, the key column in the data table will be marked as unique</param>
 <returns>Datatable with column &quot;key&quot; and &quot;value&quot;</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.GetDataTableViaODBC(System.String,System.String,System.String)">
 <summary>
     Simplified creation of a DataTable by definition of a SQL statement and a connection string
 </summary>
 <param name="strSQL">The SQL statement to retrieve the data</param>
 <param name="ConnectionString">The connection string to the data source</param>
 <param name="NameOfNewDataTable">The name of the new DataTable</param>
 <returns>A filled DataTable</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.GetDataTableViaSqlClient(System.String,System.String,System.String)">
 <summary>
     Simplified creation of a DataTable by definition of a SQL statement and a connection string
 </summary>
 <param name="strSQL">The SQL statement to retrieve the data</param>
 <param name="ConnectionString">The connection string to the data source</param>
 <param name="NameOfNewDataTable">The name of the new DataTable</param>
 <returns>A filled DataTable</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToHtmlTable(System.Data.DataTable)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToHtmlTable(System.Data.DataRowCollection,System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToHtmlTable(System.Data.DataRow[],System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToHtmlTable(System.Data.DataTable,System.String,System.String,System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <param name="titleTagOpener">The opening tag in front of the table's title</param>
 <param name="titleTagEnd">The closing tag after the table title</param>
 <param name="additionalTableAttributes">Additional attributes for the rendered table</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToHtmlTable(System.Data.DataRowCollection,System.String,System.String,System.String,System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="titleTagOpener">The opening tag in front of the table's title</param>
 <param name="titleTagEnd">The closing tag after the table title</param>
 <param name="additionalTableAttributes">Additional attributes for the rendered table</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToHtmlTable(System.Data.DataRowCollection,System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="titleTagOpener">The opening tag in front of the table's title</param>
 <param name="titleTagEnd">The closing tag after the table title</param>
 <param name="additionalTableAttributes">Additional attributes for the rendered table</param>
 <param name="htmlEncodeCellContentAndLineBreaks">Encode all output to valid HTML</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.HtmlEncodeLineBreaks(System.String)">
 <summary>
     Converts all line breaks into HTML line breaks (&quot;&lt;br&gt;&quot;)
 </summary>
 <param name="Text"></param>
 <returns></returns>
 <remarks>
     Supported line breaks are linebreaks of Windows, MacOS as well as Linux/Unix.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToHtmlTable(System.Data.DataRow[],System.String,System.String,System.String,System.String)">
 <summary>
     Return a string with all columns and rows as an html table
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <param name="titleTagOpener">The opening tag in front of the table's title</param>
 <param name="titleTagEnd">The closing tag after the table title</param>
 <param name="additionalTableAttributes">Additional attributes for the rendered table</param>
 <returns>If no rows have been processed, the return string is nothing</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToPlainTextTable(System.Data.DataTable)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="dataTable">The datatable to retrieve the content from</param>
 <returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToPlainTextTable(System.Data.DataRow[],System.String)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools._ConvertToPlainTextTable(System.Data.DataRowCollection,System.String)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.RemoveColumns(System.Data.DataTable,System.String[])">
 <summary>
     Remove the specified columns if they exist
 </summary>
 <param name="datatable">A datatable where the operations shall be made</param>
 <param name="columnNames">The names of the columns which shall be removed</param>
 <remarks>
     The columns will only be removed if they exist. If a column name doesn't exist, it will be ignored.
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertToPlainTextTable(System.Data.DataRowCollection,System.String)">
 <summary>
     Return a string with all columns and rows, helpfull for debugging purposes
 </summary>
 <param name="rows">The rows to be processed</param>
 <param name="label">An optional title of the rows</param>
 <returns>All rows are tab separated. If no rows have been processed, the user will get notified about this fact</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataReaderToDataSet(System.Data.IDataReader)">
 <summary>
     Convert any opened datareader into a dataset
 </summary>
 <param name="dataReader">An already opened dataReader</param>
 <returns>A dataset containing all datatables the dataReader was able to read</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataReaderToDataTable(System.Data.IDataReader)">
 <summary>
     Convert any opened datareader into a data table
 </summary>
 <param name="dataReader">An already opened dataReader</param>
 <returns>A data table containing all data the dataReader was able to read</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ConvertDataReaderToDataTable(System.Data.IDataReader,System.String)">
 <summary>
     Convert any opened datareader into a data table
 </summary>
 <param name="dataReader">An already opened dataReader</param>
 <param name="tableName">The name for the new table</param>
 <returns>A data table containing all data the dataReader was able to read</returns>
</member>
<member name="T:CompuMaster.Data.DataTablesTools.DataReaderAdapter">
 <summary>
     A data adapter for data readers making the real conversion
 </summary>
</member>
<member name="T:CompuMaster.Data.DataTablesTools.JoinTypes">
 <summary>
     Table join types
 </summary>
</member>
<member name="F:CompuMaster.Data.DataTablesTools.JoinTypes.Inner">
 <summary>
     The result contains only those rows which exist in both tables
 </summary>
</member>
<member name="F:CompuMaster.Data.DataTablesTools.JoinTypes.Left">
 <summary>
     The result contains all rows of the left, parent table and only those rows of the other table which are related to the rows of the left table
 </summary>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.JoinTables(System.Data.DataTable,System.Data.DataTable,CompuMaster.Data.DataTablesTools.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset based on the first relation found
 </summary>
 <param name="leftParentTable"></param>
 <param name="rightChildTable"></param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.JoinTables(System.Data.DataTable,System.Data.DataTable,System.Data.DataRelation,CompuMaster.Data.DataTablesTools.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
 <param name="leftParentTable">The left or parent table</param>
 <param name="rightChildTable">The right or child table</param>
 <param name="relation">A data table relation which shall be used for the joining</param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
 <remarks>
     The selected columns are: 
     <list>
         <item>all columns from the left parent table</item>
         <item>INNER JOIN: those columns from the right child table which are not member of the relation in charge</item>
         <item>LEFT JOIN: all columns from the right child table</item>
     </list>
 </remarks>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.JoinTables(System.Data.DataTable,System.Data.DataColumn[],System.Data.DataTable,System.Data.DataColumn[],CompuMaster.Data.DataTablesTools.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
 <param name="leftParentTable">The left or parent table</param>
 <param name="leftTableColumnsToCopy">An array of columns to copy from the left table</param>
 <param name="rightChildTable">The right or child table</param>
 <param name="rightTableColumnsToCopy">An array of columns to copy from the right table</param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.JoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[],CompuMaster.Data.DataTablesTools.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
 <param name="leftParentTable">The left or parent table</param>
 <param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table</param>
 <param name="rightChildTable">The right or child table</param>
 <param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table</param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.JoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[],System.Data.DataRelation,CompuMaster.Data.DataTablesTools.JoinTypes)">
 <summary>
     Execute a table join on two tables of the same dataset which have got a defined relation
 </summary>
 <param name="leftParentTable">The left or parent table</param>
 <param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table</param>
 <param name="rightChildTable">The right or child table</param>
 <param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table</param>
 <param name="relation">A data table relation which shall be used for the joining</param>
 <param name="joinType">Inner or left join</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.CrossJoinTables(System.Data.DataTable,System.Int32[],System.Data.DataTable,System.Int32[])">
 <summary>
     Cross join of two tables
 </summary>
 <param name="leftTable">A first datatable</param>
 <param name="indexesOfLeftTableColumnsToCopy">An array of column indexes to copy from the left table</param>
 <param name="rightTable">A second datatable</param>
 <param name="indexesOfRightTableColumnsToCopy">An array of column indexes to copy from the right table</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.AddPrefixesToColumnNames(System.Data.DataTable,System.Int32[],System.String)">
 <summary>
     Add a prefix to the names of the columns
 </summary>
 <param name="dataTable"></param>
 <param name="columnIndexes"></param>
 <param name="prefix">e. g. "orders."</param>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.AddSuffixesToColumnNames(System.Data.DataTable,System.Int32[],System.String)">
 <summary>
     Add a suffix to the names of the columns
 </summary>
 <param name="dataTable"></param>
 <param name="columnIndexes"></param>
 <param name="suffix">e. g. "-orders"</param>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.LookupUniqueColumnName(System.Data.DataTable,System.String)">
 <summary>
     Lookup a new unique column name for a data table
 </summary>
 <param name="dataTable">The data table which shall get a new data column</param>
 <param name="suggestedColumnName">A column name suggestion</param>
 <returns>The suggested column name as it is or modified column name to be unique</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ReArrangeDataColumns(System.Data.DataTable,System.String[])">
 <summary>
     Rearrange columns
 </summary>
 <param name="source">The source table with data</param>
 <param name="columnsToCopy">An array of column names which shall be copied in the specified order from the source table</param>
 <returns>A new and independent data table with copied data</returns>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ReArrangeDataColumns(System.Data.DataTable,System.Data.DataColumn[])">
 <summary>
     Rearrange columns and also change their data types
 </summary>
 <param name="source">The source table with data</param>
 <param name="destinationColumnSet">An array of columns as they shall be inserted into the result</param>
 <returns>A new and independent data table with copied data</returns>
 <remarks>
     The copy process requires that the names of the destination columns can be found in the columns collection of the source table. 
 </remarks>
 <example>
     <code language="vb">
         ReArrangeDataColumns(source, New System.Data.DataColumn() {New DataColumn("column1Name", GetType(String)), New DataColumn("column2Name", GetType(Integer))})
     </code>
 </example>
</member>
<member name="M:CompuMaster.Data.DataTablesTools.ReArrangeDataColumns(System.Data.DataTable,System.Data.DataColumn[],System.Collections.ArrayList)">
 <summary>
     Rearrange columns and also change their data types
 </summary>
 <param name="source">The source table with data</param>
 <param name="destinationColumnSet">An array of columns as they shall be inserted into the result</param>
 <param name="ignoreConversionExceptionAndLogThemHere">In case of data conversion exceptions, log them here instead of throwing them immediately</param>
 <returns>A new and independent data table with copied data</returns>
 <remarks>
     The copy process requires that the names of the destination columns can be found in the columns collection of the source table. 
 </remarks>
 <example>
     <code language="vb">
         ReArrangeDataColumns(source, New System.Data.DataColumn() {New DataColumn("column1Name", GetType(String)), New DataColumn("column2Name", GetType(Integer))})
     </code>
 </example>
</member>
<member name="T:CompuMaster.Data.Ldap">
 <summary>
     LDAP access to retrieve data
 </summary>
</member>
<member name="M:CompuMaster.Data.Ldap.QueryUsers(System.String,System.String)">
 <summary>
     Returns different information on all the users matching the filter
     expression within the given domain as contents of a DataTable
 </summary>
 <param name="domain">The domain from which to gather the information</param>
 <param name="SearchFilterExpression">The filter expression for specific selection purposes.
             For valid filter expressions see the documentation about
             System.DirectoryServices.DirectorySearcher.Filter</param>
 <returns>A DataTable containing the information, Nothing if an error occurs during execution</returns>
 <remarks>
     The Table contains the following columns:
     - UserName      User's accountname
     - FirstName     First name
     - LastName      Last name
     - DiplayName    Diplayed name
     - Title         Position
     - EMail         E-Mail address
     - Phone         Phone number
     - MobilePhone   Cell / mobile phone number
     - VoIPPhone     VoIP phone number
     - Street        Street and house number
     - ZIP           Zip / postal code
     - City          City name
     - Country       Country name
     - Company       Company name
     - Department    Department name
     - Initials      The initials of the user

     Note that any field except "UserName" is optional.
     All fields are of type String.
     Each user account is represented by a DataRow.
 </remarks>
</member>
<member name="M:CompuMaster.Data.Ldap.QueryUsers(System.String,System.String,System.String,System.String)">
 <summary>
     Returns different information on all the users matching the filter
     expression within the given domain as contents of a DataTable
 </summary>
 <param name="domain">The domain from which to gather the information</param>
 <param name="SearchFilterExpression">The filter expression for specific selection purposes.
             For valid filter expressions see the documentation about
             System.DirectoryServices.DirectorySearcher.Filter</param>
 <param name="username">LDAP authentification user</param>
 <param name="password">LDAP authentification password</param>
 <returns>A DataTable containing the information, Nothing if an error occurs during execution</returns>
 <remarks>
     The Table contains the following columns:
     - UserName      User's accountname
     - FirstName     First name
     - LastName      Last name
     - DiplayName    Diplayed name
     - Title         Position
     - EMail         E-Mail address
     - Phone         Phone number
     - MobilePhone   Cell / mobile phone number
     - VoIPPhone     VoIP phone number
     - Street        Street and house number
     - ZIP           Zip / postal code
     - City          City name
     - Country       Country name
     - Company       Company name
     - Department    Department name
     - Initials      The initials of the user

     Note that any field except "UserName" is optional.
     All fields are of type String.
     Each user account is represented by a DataRow.
 </remarks>
</member>
<member name="M:CompuMaster.Data.Ldap.QueryUsersByAccountName(System.String,System.String)">
 <summary>
     Returns different information on all the users with the given account
     name within the given domain as contents of a DataTable
 </summary>
 <param name="domain">The domain from which to gather the information</param>
 <param name="UserAccountName">The account name for which to search</param>
 <returns>A DataTable containing the information, Nothing if an error occurs during execution</returns>
 <remarks>
     The Table contains the following columns:
     - UserName      User's accountname
     - FirstName     First name
     - LastName      Last name
     - DiplayName    Diplayed name
     - Title         Position
     - EMail         E-Mail address
     - Phone         Phone number
     - MobilePhone   Cell / mobile phone number
     - VoIPPhone     VoIP phone number
     - Street        Street and house number
     - ZIP           Zip / postal code
     - City          City name
     - Country       Country name
     - Company       Company name
     - Department    Department name
     - Initials      The initials of the user

     Note that any field except "UserName" is optional.
     All fields are of type String.
     Each user account is represented by a DataRow.
 </remarks>
</member>
<member name="M:CompuMaster.Data.Ldap.QueryUsersByAccountName(System.String,System.String,System.String,System.String)">
 <summary>
     Returns different information on all the users with the given account
     name within the given domain as contents of a DataTable
 </summary>
 <param name="domain">The domain from which to gather the information</param>
 <param name="UserAccountName">The account name for which to search</param>
 <param name="ldapAuthUsername">LDAP authentification user</param>
 <param name="ldapAuthPassword">LDAP authentification password</param>
 <returns>A DataTable containing the information, Nothing if an error occurs during execution</returns>
 <remarks>
     The Table contains the following columns:
     - UserName      User's accountname
     - FirstName     First name
     - LastName      Last name
     - DiplayName    Diplayed name
     - Title         Position
     - EMail         E-Mail address
     - Phone         Phone number
     - MobilePhone   Cell / mobile phone number
     - VoIPPhone     VoIP phone number
     - Street        Street and house number
     - ZIP           Zip / postal code
     - City          City name
     - Country       Country name
     - Company       Company name
     - Department    Department name
     - Initials      The initials of the user

     Note that any field except "UserName" is optional.
     All fields are of type String.
     Each user account is represented by a DataRow.
 </remarks>
</member>
<member name="M:CompuMaster.Data.Ldap.Query(System.String,System.String)">
 <summary>
     Query the LDAP
 </summary>
 <param name="domain">The domain name which will be used as LDAP server name (to query the domain controller)</param>
 <param name="searchFilterExpression">A search expression to filter the results</param>
 <returns>A datatable containing all data as strings</returns>
</member>
<member name="M:CompuMaster.Data.Ldap.Query(System.String,System.String,System.String,System.String)">
 <summary>
     Query the LDAP
 </summary>
 <param name="domain">The domain name which will be used as LDAP server name (to query the domain controller)</param>
 <param name="searchFilterExpression">A search expression to filter the results</param>
 <param name="username">LDAP authentification user</param>
 <param name="password">LDAP authentification password</param>
 <returns>A datatable containing all data as strings</returns>
</member>
<member name="M:CompuMaster.Data.Ldap.QueryUsersByName(System.String,System.String,System.String)">
 <summary>
     Returns different information on all the users with the given first
     and / or last name within the given domain as contents of a DataTable
 </summary>
 <param name="domain">The domain from which to gather the information</param>
 <param name="UserFirstName">The first name for which to search (may be empty or nothing if last name is given)</param>
 <param name="UserLastName">The last name for which to search (may be empty or nothing if first name is given)</param>
 <returns>A DataTable containing the information, Nothing if an error occurs during execution</returns>
 <remarks>
     The Table contains the following columns:
     - UserName      User's accountname
     - FirstName     First name
     - LastName      Last name
     - DiplayName    Diplayed name
     - Title         Position
     - EMail         E-Mail address
     - Phone         Phone number
     - MobilePhone   Cell / mobile phone number
     - VoIPPhone     VoIP phone number
     - Street        Street and house number
     - ZIP           Zip / postal code
     - City          City name
     - Country       Country name
     - Company       Company name
     - Department    Department name
     - Initials      The initials of the user

     Note that any field except "UserName" is optional.
     All fields are of type String.
     Each user account is represented by a DataRow.
 </remarks>
</member>
<member name="M:CompuMaster.Data.Ldap.QueryUsersByName(System.String,System.String,System.String,System.String,System.String)">
 <summary>
     Returns different information on all the users with the given first
     and / or last name within the given domain as contents of a DataTable
 </summary>
 <param name="domain">The domain from which to gather the information</param>
 <param name="UserFirstName">The first name for which to search (may be empty or nothing if last name is given)</param>
 <param name="UserLastName">The last name for which to search (may be empty or nothing if first name is given)</param>
 <param name="ldapAuthUsername">LDAP authentification user</param>
 <param name="ldapAuthPassword">LDAP authentification password</param>
 <returns>A DataTable containing the information, Nothing if an error occurs during execution</returns>
 <remarks>
     The Table contains the following columns:
     - UserName      User's accountname
     - FirstName     First name
     - LastName      Last name
     - DiplayName    Diplayed name
     - Title         Position
     - EMail         E-Mail address
     - Phone         Phone number
     - MobilePhone   Cell / mobile phone number
     - VoIPPhone     VoIP phone number
     - Street        Street and house number
     - ZIP           Zip / postal code
     - City          City name
     - Country       Country name
     - Company       Company name
     - Department    Department name
     - Initials      The initials of the user

     Note that any field except "UserName" is optional.
     All fields are of type String.
     Each user account is represented by a DataRow.
 </remarks>
</member>
<member name="M:CompuMaster.Data.Ldap.QueryAllUsers(System.String)">
 <summary>
     Returns different information on all users within the given domain
     as contents of a DataTable
 </summary>
 <param name="domain">The domain from which to gather the information</param>
 <returns>A DataTable containing the information, Nothing if an error occurs during execution</returns>
 <remarks>
     The Table contains the following columns:
     - UserName      User's accountname
     - FirstName     First name
     - LastName      Last name
     - DiplayName    Diplayed name
     - Title         Position
     - EMail         E-Mail address
     - Phone         Phone number
     - MobilePhone   Cell / mobile phone number
     - VoIPPhone     VoIP phone number
     - Street        Street and house number
     - ZIP           Zip / postal code
     - City          City name
     - Country       Country name
     - Company       Company name
     - Department    Department name
     - Initials      The initials of the user

     Note that any field except "UserName" is optional.
     All fields are of type String.
     Each user account is represented by a DataRow.
 </remarks>
</member>
<member name="M:CompuMaster.Data.Ldap.QueryAllUsers(System.String,System.String,System.String)">
 <summary>
     Returns different information on all users within the given domain
     as contents of a DataTable
 </summary>
 <param name="domain">The domain from which to gather the information</param>
 <param name="username">LDAP authentification user</param>
 <param name="password">LDAP authentification password</param>
 <returns>A DataTable containing the information, Nothing if an error occurs during execution</returns>
 <remarks>
     The Table contains the following columns:
     - UserName      User's accountname
     - FirstName     First name
     - LastName      Last name
     - DiplayName    Diplayed name
     - Title         Position
     - EMail         E-Mail address
     - Phone         Phone number
     - MobilePhone   Cell / mobile phone number
     - VoIPPhone     VoIP phone number
     - Street        Street and house number
     - ZIP           Zip / postal code
     - City          City name
     - Country       Country name
     - Company       Company name
     - Department    Department name
     - Initials      The initials of the user

     Note that any field except "UserName" is optional.
     All fields are of type String.
     Each user account is represented by a DataRow.
 </remarks>
</member>
<member name="M:CompuMaster.Data.Ldap.QueryUsers_CreateInfoTable(System.String)">
 <summary>
     Creates a DataTable with all the required columns for containing
     user information
 </summary>
 <param name="DomName">The domain name to be included in the table's title</param>
 <returns>An empty DataTable containing the prepared columns</returns>
</member>
<member name="T:CompuMaster.Data.Manipulation">
 <summary>
 Provide methods for transferring data from and back to a remote database on a data connection
 </summary>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.Manipulation.DdlLanguage">
 <summary>
 DDL languages
 </summary>
 <remarks></remarks>
</member>
<member name="F:CompuMaster.Data.Manipulation.DdlLanguage.NoDDL">
 <summary>
 Do not use automations for creating of tables or columns
 </summary>
 <remarks></remarks>
</member>
<member name="F:CompuMaster.Data.Manipulation.DdlLanguage.MSJetEngine">
 <summary>
 Use the DDL syntax for maintenance of MS Jet Engines like MS Access files
 </summary>
 <remarks></remarks>
</member>
<member name="F:CompuMaster.Data.Manipulation.DdlLanguage.MSSqlServer">
 <summary>
 Use the DDL syntax for maintenance of MS SQL Server databases
 </summary>
 <remarks></remarks>
</member>
<member name="F:CompuMaster.Data.Manipulation.DdlLanguage.PostgreSQL">
 <summary>
 Use the DDL syntax for maintenance of PostgreSQL databases
 </summary>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.Manipulation.DataManipulationResults">
 <summary>
 A container for a DataTable with its IDataAdapter and IDbCommand
 </summary>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.WriteDataSetToDataConnection(System.Data.DataSet,System.Data.IDbConnection,CompuMaster.Data.Manipulation.DdlLanguage,System.Boolean)">
 <summary>
 Write tables of a dataset with their rows into tables on a data connection
 </summary>
 <param name="dataSet">A dataset whose tables shall be transferred to the data connection</param>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="ddlLanguage">A DDL language which shall be used for creating/extending a table on the data connection</param>
 <param name="dropExistingRowsInDestinationTable"></param>
 <remarks>Missing columns will be added automatically. In case that a column already exist on the remote database and its datatype doesn't match the datatype in the source table, there might be thrown an exception while data transfer.</remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.WriteDataSetToDataConnection(System.Data.DataSet,System.Data.IDbConnection,CompuMaster.Data.Manipulation.DdlLanguage,System.Boolean,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
 Write tables of a dataset with their rows into tables on a data connection
 </summary>
 <param name="dataSet">A dataset whose tables shall be transferred to the data connection</param>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="ddlLanguage">A DDL language which shall be used for creating/extending a table on the data connection</param>
 <param name="dropExistingRowsInDestinationTable"></param>
 <param name="connectionBehaviour">Automations regarding the connection state</param>
 <remarks>Missing columns will be added automatically. In case that a column already exist on the remote database and its datatype doesn't match the datatype in the source table, there might be thrown an exception while data transfer.</remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.WriteDataTableToDataConnection(System.Data.DataTable,System.Data.IDbConnection,CompuMaster.Data.Manipulation.DdlLanguage,System.Boolean)">
 <summary>
 Write a datatable with its rows into a table on a data connection
 </summary>
 <param name="table">The table which shall be transferred to the data connection</param>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="ddlLanguage">A DDL language which shall be used for creating/extending a table on the data connection</param>
 <param name="dropExistingRowsInDestinationTable">If True, all existing rows will be removed first before new rows from the source table will be imported</param>
 <remarks>If the table doesn't exist on the data connection, it will be created automatically if supported by the DDL language. Missing columns will be added automatically. In case that a column already exist on the remote database and its datatype doesn't match the datatype in the source table, there might be thrown an exception while data transfer.</remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.WriteDataTableToDataConnection(System.Data.DataTable,System.String,System.Data.IDbConnection,CompuMaster.Data.Manipulation.DdlLanguage,System.Boolean)">
 <summary>
 Write a datatable with its rows into a table on a data connection
 </summary>
 <param name="sourceTable">The table which shall be transferred to the data connection</param>
 <param name="remoteTableName"></param>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="ddlLanguage">A DDL language which shall be used for creating/extending a table on the data connection</param>
 <param name="dropExistingRowsInDestinationTable">If True, all existing rows will be removed first before new rows from the source table will be imported</param>
 <remarks>If the table doesn't exist on the data connection, it will be created automatically if supported by the DDL language. Missing columns will be added automatically. In case that a column already exist on the remote database and its datatype doesn't match the datatype in the source table, there might be thrown an exception while data transfer.</remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.WriteDataTableToDataConnection(System.Data.DataTable,System.Data.IDbConnection,CompuMaster.Data.Manipulation.DdlLanguage,System.Boolean,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
 Write a datatable with its rows into a table on a data connection
 </summary>
 <param name="sourceTable">The table which shall be transferred to the data connection</param>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="ddlLanguage">A DDL language which shall be used for creating/extending a table on the data connection</param>
 <param name="dropExistingRowsInDestinationTable">If True, all existing rows will be removed first before new rows from the source table will be imported</param>
 <param name="connectionBehaviour">Automations regarding the connection state</param>
 <remarks>If the table doesn't exist on the data connection, it will be created automatically if supported by the DDL language. Missing columns will be added automatically. In case that a column already exist on the remote database and its datatype doesn't match the datatype in the source table, there might be thrown an exception while data transfer.</remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.WriteDataTableToDataConnection(System.Data.DataTable,System.String,System.Data.IDbConnection,CompuMaster.Data.Manipulation.DdlLanguage,System.Boolean,CompuMaster.Data.DataQuery.AnyIDataProvider.Automations)">
 <summary>
 Write a datatable with its rows into a table on a data connection
 </summary>
 <param name="sourceTable">The table which shall be transferred to the data connection</param>
 <param name="remoteTableName"></param>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="ddlLanguage">A DDL language which shall be used for creating/extending a table on the data connection</param>
 <param name="dropExistingRowsInDestinationTable">If True, all existing rows will be removed first before new rows from the source table will be imported</param>
 <param name="connectionBehaviour">Automations regarding the connection state</param>
 <remarks>If the table doesn't exist on the data connection, it will be created automatically if supported by the DDL language. Missing columns will be added automatically. In case that a column already exist on the remote database and its datatype doesn't match the datatype in the source table, there might be thrown an exception while data transfer.</remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.CreateTableCommandText(System.String,System.String,CompuMaster.Data.Manipulation.DdlLanguage)">
 <summary>
 Create a script for creating an empty table with just a single primary ID key field
 </summary>
 <param name="tableName">The table name which shall be created</param>
 <param name="primaryColumnName">The name for the primary, auto-increment ID field</param>
 <param name="ddlLanguage">The DDL language which shall be used</param>
 <returns>A string containing a command text which can be executed against a data connection</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.AddMissingColumnsCommandText(System.Data.DataTable,System.Data.DataTable,CompuMaster.Data.Manipulation.DdlLanguage)">
 <summary>
 Create an SQL command text to create missing columns on the remote database
 </summary>
 <param name="sourceTable">The table which shall be written into the remote database</param>
 <param name="destinationTable">The table as it is currently on the remote database</param>
 <param name="ddlLanguage">The SQL language which shall be used</param>
 <returns>A valid command text to create missing columns on the remote database</returns>
 <remarks>
 This function doesn't create any column update commands to change existing columns; it just creates commands for adding additional columns.
 </remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.LoadTableDataForManipulationViaCode(System.Data.IDbConnection,System.String)">
 <summary>
 Load table data from the data connection in a mode for submitting changes in a later step
 </summary>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="tableName">The name of a table on the database</param>
 <returns>An DataManipulationResults object with the returned data</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.LoadTableDataForManipulationViaCode(System.Data.IDbConnection,System.String,System.Int32)">
 <summary>
 Load table data from the data connection in a mode for submitting changes in a later step
 </summary>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="tableName">The name of a table on the database</param>
 <param name="commandTimeout">A timeout for the command in seconds</param>
 <returns>An DataManipulationResults object with the returned data</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.LoadDataForManipulationViaCode(System.Data.IDbConnection,System.Data.IDbCommand)">
 <summary>
 Load data from the data connection in a mode for submitting changes in a later step
 </summary>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="command">A prepared command object</param>
 <returns>An DataManipulationResults object with the returned data</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.AutoFixCommandColumnNames(System.Data.IDbCommand,System.Data.IDbCommand,System.Data.IDbCommand,System.String)">
 <summary>
 Auto-Fix delete/insert/update commands to support field names with reserved names by adding brackets [ ] around the field names
 </summary>
 <param name="DeleteCommand"></param>
 <param name="InsertCommand"></param>
 <param name="UpdateCommand"></param>
 <param name="remoteTableColumnName"></param>
</member>
<member name="M:CompuMaster.Data.Manipulation.LookupColumnNamesOnRemoteTable(System.Data.DataTable)">
 <summary>
 Lookup a full set of column names used in a table
 </summary>
 <param name="table">A data table</param>
 <returns>An array of strings with the column names of the data table</returns>
</member>
<member name="M:CompuMaster.Data.Manipulation.LoadQueryDataForManipulationViaCode(System.Data.IDbConnection,System.String)">
 <summary>
 Query the data from the data connection in a mode for submitting changes in a later step
 </summary>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="selectStatement">The name of a table on the database</param>
 <returns>An DataManipulationResults object with the returned data</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.LoadQueryDataForManipulationViaCode(System.Data.IDbConnection,System.String,System.Int32)">
 <summary>
 Query the data from the data connection in a mode for submitting changes in a later step
 </summary>
 <param name="dataConnection">An opened connection to the data source</param>
 <param name="selectStatement">The name of a table on the database</param>
 <param name="commandTimeout">A timeout for the command in seconds</param>
 <returns>An DataManipulationResults object with the returned data</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.LoadQueryDataForManipulationViaCode(System.Data.IDbCommand)">
 <summary>
 Query the data from the data connection in a mode for submitting changes in a later step
 </summary>
 <param name="command">A command with an opened connection to the data source</param>
 <returns>An DataManipulationResults object with the returned data</returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.UpdateCodeManipulatedData(CompuMaster.Data.DataManipulationResult)">
 <summary>
     Write back changes to the data connection
 </summary>
 <param name="container"></param>
</member>
<member name="M:CompuMaster.Data.Manipulation.UpdateCodeManipulatedData(CompuMaster.Data.DataManipulationResult,System.Boolean)">
 <summary>
     Write back changes to the data connection
 </summary>
 <param name="container"></param>
 <param name="useTransactionsIfAvailable"></param>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Manipulation.LoadTableStructureWith1RowFromConnection(System.String,System.Data.IDbConnection,System.Boolean)">
 <summary>
 Load a first row from the remote connection to receive list of columns
 </summary>
 <param name="tableName"></param>
 <param name="dataConnection"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.NamespaceDoc">
 <summary>
     CompuMaster common tools and utilities for data exchange
 </summary>
 <remarks>
 PLEASE NOTE: the concept of System.Data.DataTable causes System.OutOfMemoryExceptions at a system-specific limit, depending on installed RAM, RAM usage, RAM fragmentation, size of data in DataTable, etc.
 Some systems with 8 GB RAM installed might be able to handle 8,000,000 rows in a System.Data.DataTable, while other systems might be able to manage more or lesser rows.
 </remarks>
 <copyright>CompuMaster GmbH</copyright>
</member>
<member name="T:CompuMaster.Data.XlsReader">
 <summary>
     Provides simplified read access to XLS(X/M/B) files via MS OLE-DB/ODBC Jet Providers
 </summary>
</member>
<member name="M:CompuMaster.Data.XlsReader.ReadDataTableFromXlsFile(System.String,System.String)">
 <summary>
     Read from an excel file
 </summary>
 <param name="path">The path of the .XLS file</param>
 <param name="sheetName">A name of a sheet where the read operations shall execute</param>
 <returns>A new and independent datatable with the content of the sheet</returns>
</member>
<member name="M:CompuMaster.Data.XlsReader.ReadDataTableFromXlsFile(System.String,System.String,System.String)">
 <summary>
     Read from an excel file
 </summary>
 <param name="path">The path of the .XLS file</param>
 <param name="resultingDataTableName">A name for the resulting datatable</param>
 <param name="querySql">A query SQL to filter the returned data, e. g. SELECT * FROM [sheetName$], SELECT * FROM [Tabelle1$A1:B10] or SELECT * FROM NamedArea"</param>
 <returns>A new and independent datatable with the content of the sheet</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.XlsReader.LookupLastContentRowIndex(System.Data.DataTable)">
 <summary>
 Lookup the last content row index (the last content cell might differ from Excel's special cell xlLastCell)
 </summary>
 <param name="table"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.XlsReader.IsEmptyCell(System.Data.DataTable,System.Int32,System.Int32)">
 <summary>
 Determine if a cell contains empty content
 </summary>
 <param name="table"></param>
 <param name="rowIndex"></param>
 <param name="columnIndex"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.Utils">
 <summary>
 Utils for converting and handling database data
 </summary>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object)">
 <summary>
     Checks for DBNull and returns null (Nothing in VisualBasic) in that case
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <returns>A value which is not DBNull; a DBNull as input will return null (Nothing in VisualBasic)</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Char)">
 <summary>
     Checks for DBNull and returns null (Nothing in VisualBasic) in that case
 </summary>
 <param name="replaceWithThis">The value to be checked</param>
 <returns>A value which is not DBNull; a DBNull as input will return null (Nothing in VisualBasic)</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Object)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Int32)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Int64)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Decimal)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Int16)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Single)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Boolean)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.DateTime)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Double)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Byte)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.Char})">
 <summary>
     Checks for DBNull and returns null (Nothing in VisualBasic) in that case
 </summary>
 <param name="replaceWithThis">The value to be checked</param>
 <returns>A value which is not DBNull; a DBNull as input will return null (Nothing in VisualBasic)</returns>
 <remarks>
 </remarks>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.Int32})">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.Int64})">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.Decimal})">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.Int16})">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.Single})">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.Boolean})">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.DateTime})">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.Double})">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Nullable{System.Byte})">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.Byte[])">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull(System.Object,System.String)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull``1(System.Object)">
 <summary>
     Checks for DBNull and returns the null (Nothing in VisualBasic) alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <returns>A value which is not DBNull, otherwise null (Nothing in VisualBasic)</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NoDBNull``1(System.Object,``0)">
 <summary>
     Checks for DBNull and returns the second value alternatively
 </summary>
 <param name="checkValueIfDBNull">The value to be checked</param>
 <param name="replaceWithThis">The alternative value, null (Nothing in VisualBasic) if not defined</param>
 <returns>A value which is not DBNull</returns>
</member>
<member name="M:CompuMaster.Data.Utils.DoubleNotNaNOrNothing(System.Double)">
 <summary>
 Return a double which is not NaN (double's special constant &quot;not a number&quot;)
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.DoubleNotNaNOrDBNull(System.Double)">
 <summary>
 Return a double which is not NaN (double's special constant &quot;not a number&quot;)
 </summary>
 <param name="value"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.DoubleNotNaNOrAlternativeValue(System.Double,System.Double)">
 <summary>
 Return a double which is not NaN (double's special constant &quot;not a number&quot;)
 </summary>
 <param name="value"></param>
 <param name="alternativeValue"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.StringNotEmptyOrNothing(System.String)">
 <summary>
     Return the string which is not nothing or else String.Empty
 </summary>
 <param name="value">The string to be validated</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Utils.StringNotNothingOrEmpty(System.String)">
 <summary>
     Return the string which is not nothing or else String.Empty
 </summary>
 <param name="value">The string to be validated</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Utils.StringNotNothingOrAlternativeValue(System.String,System.String)">
 <summary>
     Return the string which is not nothing or else the alternative value
 </summary>
 <param name="value">The string to be validated</param>
 <param name="alternativeValue">An alternative value if the first value is nothing</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Utils.StringNotEmptyOrAlternativeValue(System.String,System.String)">
 <summary>
     Return the string which is not empty or else the alternative value
 </summary>
 <param name="value">The string to be validated</param>
 <param name="alternativeValue">An alternative value if the first value is empty</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Utils.StringNotEmptyOrDBNull(System.String)">
 <summary>
     Return the string which is not empty or otherwise return DBNull.Value 
 </summary>
 <param name="value">The string to be validated</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.Double)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.Int32)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.Int64)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.Decimal)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.DateTime)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.Single)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.Byte)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.UInt16)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.UInt32)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.UInt64)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrDBNull(System.Int16)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Double,System.Double)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Int32,System.Int32)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Int64,System.Int64)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Decimal,System.Decimal)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.DateTime,System.DateTime)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.TimeSpan,System.TimeSpan)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Single,System.Single)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Byte,System.Byte)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Byte,System.UInt16)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Byte,System.UInt32)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Byte,System.UInt64)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ValueNotNothingOrAlternativeValue(System.Int16,System.Int16)">
 <summary>
     Return the value which is not nothing/null/zero or otherwise return DBNull.Value 
 </summary>
 <param name="value">The value to be validated</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.ObjectNotNothingOrEmptyString(System.Object)">
 <summary>
     Return the object which is not nothing or otherwise return DBNull.Value 
 </summary>
 <param name="value">The string to be validated</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Utils.ObjectNotNothingOrDBNull(System.Object)">
 <summary>
     Return the object which is not nothing or otherwise return DBNull.Value 
 </summary>
 <param name="value">The string to be validated</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Utils.ObjectNotEmptyStringOrNothing(System.Object)">
 <summary>
     Return the object which is not an empty string or otherwise return Nothing
 </summary>
 <param name="value">The object to be validated</param>
 <returns>A string with length > 0 (the value) or nothing</returns>
</member>
<member name="M:CompuMaster.Data.Utils.NullableTypeWithItsValueOrDBNull``1(System.Nullable{``0})">
 <summary>
     Return the value if there is a value or otherwise return DBNull.Value 
 </summary>
 <param name="value">The nullable type value to be validated</param>
</member>
<member name="M:CompuMaster.Data.Utils.ArrayNotNothingOrDBNull(System.Array)">
 <summary>
     Return the array which is not nothing or otherwise return DBNull.Value 
 </summary>
 <param name="values">The array to be validated</param>
</member>
<member name="M:CompuMaster.Data.Utils.ArrayNotEmptyOrDBNull(System.Array)">
 <summary>
     Return the array with at least 1 element or otherwise return DBNull.Value 
 </summary>
 <param name="values">The array to be validated</param>
</member>
<member name="M:CompuMaster.Data.Utils.ArrayNotEmptyOrNothing``1(``0[])">
 <summary>
     Return the array with at least 1 element or otherwise return Nothing
 </summary>
 <param name="values">The array to be validated</param>
</member>
<member name="M:CompuMaster.Data.Utils.ArrayNotNothingOrEmpty``1(``0[])">
 <summary>
     Return the array with at least 0 elements in case it's Nothing
 </summary>
 <param name="values">The array to be validated</param>
</member>
<member name="M:CompuMaster.Data.Utils.StringNotNothingOrDBNull(System.String)">
 <summary>
     Return the string which is not nothing or otherwise return DBNull.Value 
 </summary>
 <param name="value">The string to be validated</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Utils.ConnectionStringWithoutPasswords(System.String)">
 <summary>
 Prepare a connection string for transmission to users without sensitive password information
 </summary>
 <param name="fullConnectionString">The regular ConnectionString</param>
 <returns>The first part of the ConnectionString till the password position</returns>
 <remarks>
 All information after the password position will be removed, too. So, you can hide the user name by positioning it after the password (UID=user;PWD=xxxx vs. PWD=xxxx;UID=user).
 </remarks>
</member>
<member name="M:CompuMaster.Data.Utils.OnValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
 <summary>
 Suppress all SSL certification requirements - just use the webservice SSL URL
 </summary>
 <param name="sender"></param>
 <param name="cert"></param>
 <param name="chain"></param>
 <param name="errors"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Utils.EvaluateTextBlockLineData(System.String)">
 <summary>
 Evaluate the maximum width of a text block
 </summary>
 <param name="text"></param>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
